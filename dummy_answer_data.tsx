export default function getDummyAnswerData() {
  const data = {
    "items": [
      {
        "tags": [],
        "owner": {
          "account_id": 36459,
          "reputation": 38955,
          "user_id": 104014,
          "user_type": "registered",
          "accept_rate": 89,
          "profile_image": "https://www.gravatar.com/avatar/3d186f3c6ad2de59b356c1cfad9af404?s=128&d=identicon&r=PG",
          "display_name": "Artem Barger",
          "link": "https://stackoverflow.com/users/104014/artem-barger"
        },
        "up_vote_count": 9343,
        "is_accepted": true,
        "community_owned_date": 1343334545,
        "score": 9149,
        "last_activity_date": 1627318671,
        "last_edit_date": 1627318671,
        "creation_date": 1243067746,
        "answer_id": 901144,
        "question_id": 901115,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**Update: June-2021**\r\n\r\nFor a specific case when you need all query params:\r\n\r\n```\r\nconst urlSearchParams = new URLSearchParams(window.location.search);\r\nconst params = Object.fromEntries(urlSearchParams.entries());\r\n```\r\n\r\n**Update: Sep-2018**\r\n\r\nYou can use [URLSearchParams][1] which is simple and has [decent (but not complete) browser support][5].\r\n\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const myParam = urlParams.get(&#39;myParam&#39;);\r\n\r\n**Original**\r\n\r\nYou don&#39;t need jQuery for that purpose. You can use just some pure JavaScript:\r\n\r\n    function getParameterByName(name, url = window.location.href) {\r\n        name = name.replace(/[\\[\\]]/g, &#39;\\\\$&amp;&#39;);\r\n        var regex = new RegExp(&#39;[?&amp;]&#39; + name + &#39;(=([^&amp;#]*)|&amp;|#|$)&#39;),\r\n            results = regex.exec(url);\r\n        if (!results) return null;\r\n        if (!results[2]) return &#39;&#39;;\r\n        return decodeURIComponent(results[2].replace(/\\+/g, &#39; &#39;));\r\n    }\r\n\r\n**Usage:**\r\n\r\n    // query string: ?foo=lorem&amp;bar=&amp;baz\r\n    var foo = getParameterByName(&#39;foo&#39;); // &quot;lorem&quot;\r\n    var bar = getParameterByName(&#39;bar&#39;); // &quot;&quot; (present with empty value)\r\n    var baz = getParameterByName(&#39;baz&#39;); // &quot;&quot; (present with no value)\r\n    var qux = getParameterByName(&#39;qux&#39;); // null (absent)\r\n\r\n\r\nNOTE: If a parameter is present several times (`?foo=lorem&amp;foo=ipsum`), you will get the first value (`lorem`). There is no standard about this and usages vary, see for example this question: [Authoritative position of duplicate HTTP GET query keys](https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys).\r\n\r\nNOTE: The function is case-sensitive. If you prefer case-insensitive parameter name, [add &#39;i&#39; modifier to RegExp][2]\r\n\r\nNOTE: If you&#39;re getting a no-useless-escape eslint error, you can replace `name = name.replace(/[\\[\\]]/g, &#39;\\\\$&amp;&#39;);` with `name = name.replace(/[[\\]]/g, &#39;\\\\$&amp;&#39;)`.\r\n\r\n---\r\n\r\nThis is an update based on the new [URLSearchParams specs][3] to achieve the same result more succinctly. See answer titled &quot;[URLSearchParams][4]&quot; below.\r\n\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Browser_compatibility\r\n  [2]: https://stackoverflow.com/questions/3939715/case-insensitive-regex-in-javascript\r\n  [3]: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\r\n  [4]: https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/901144#12151322\r\n  [5]: https://caniuse.com/#feat=urlsearchparams",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p><strong>Update: June-2021</strong></p>\n<p>For a specific case when you need all query params:</p>\n<pre><code>const urlSearchParams = new URLSearchParams(window.location.search);\nconst params = Object.fromEntries(urlSearchParams.entries());\n</code></pre>\n<p><strong>Update: Sep-2018</strong></p>\n<p>You can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Browser_compatibility\" rel=\"noreferrer\">URLSearchParams</a> which is simple and has <a href=\"https://caniuse.com/#feat=urlsearchparams\" rel=\"noreferrer\">decent (but not complete) browser support</a>.</p>\n<pre><code>const urlParams = new URLSearchParams(window.location.search);\nconst myParam = urlParams.get('myParam');\n</code></pre>\n<p><strong>Original</strong></p>\n<p>You don't need jQuery for that purpose. You can use just some pure JavaScript:</p>\n<pre><code>function getParameterByName(name, url = window.location.href) {\n    name = name.replace(/[\\[\\]]/g, '\\\\$&amp;');\n    var regex = new RegExp('[?&amp;]' + name + '(=([^&amp;#]*)|&amp;|#|$)'),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n</code></pre>\n<p><strong>Usage:</strong></p>\n<pre><code>// query string: ?foo=lorem&amp;bar=&amp;baz\nvar foo = getParameterByName('foo'); // &quot;lorem&quot;\nvar bar = getParameterByName('bar'); // &quot;&quot; (present with empty value)\nvar baz = getParameterByName('baz'); // &quot;&quot; (present with no value)\nvar qux = getParameterByName('qux'); // null (absent)\n</code></pre>\n<p>NOTE: If a parameter is present several times (<code>?foo=lorem&amp;foo=ipsum</code>), you will get the first value (<code>lorem</code>). There is no standard about this and usages vary, see for example this question: <a href=\"https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys\">Authoritative position of duplicate HTTP GET query keys</a>.</p>\n<p>NOTE: The function is case-sensitive. If you prefer case-insensitive parameter name, <a href=\"https://stackoverflow.com/questions/3939715/case-insensitive-regex-in-javascript\">add 'i' modifier to RegExp</a></p>\n<p>NOTE: If you're getting a no-useless-escape eslint error, you can replace <code>name = name.replace(/[\\[\\]]/g, '\\\\$&amp;');</code> with <code>name = name.replace(/[[\\]]/g, '\\\\$&amp;')</code>.</p>\n<hr />\n<p>This is an update based on the new <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" rel=\"noreferrer\">URLSearchParams specs</a> to achieve the same result more succinctly. See answer titled &quot;<a href=\"https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/901144#12151322\">URLSearchParams</a>&quot; below.</p>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 1344226,
          "reputation": 2508,
          "user_id": 1285273,
          "user_type": "registered",
          "accept_rate": 87,
          "profile_image": "https://www.gravatar.com/avatar/4893d8ba83bc77017d8932a09bf348e1?s=128&d=identicon&r=PG",
          "display_name": "IT ppl",
          "link": "https://stackoverflow.com/users/1285273/it-ppl"
        },
        "up_vote_count": 23,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 23,
        "last_activity_date": 1609618250,
        "last_edit_date": 1609618250,
        "creation_date": 1337847520,
        "answer_id": 10733654,
        "question_id": 901115,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "This one works fine. Regular expressions in some of the other answers introduce unnecessary overhead.\r\n\r\n    function getQuerystring(key) {\r\n        var query = window.location.search.substring(1);\r\n        var vars = query.split(&quot;&amp;&quot;);\r\n        for (var i = 0; i &lt; vars.length; i++) {\r\n            var pair = vars[i].split(&quot;=&quot;);\r\n            if (pair[0] == key) {\r\n                return pair[1];\r\n            }\r\n        }\r\n    }\r\n\r\ntaken from [here][1]\r\n\r\n\r\n  [1]: http://forums.asp.net/t/1771251.aspx/1",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>This one works fine. Regular expressions in some of the other answers introduce unnecessary overhead.</p>\n<pre><code>function getQuerystring(key) {\n    var query = window.location.search.substring(1);\n    var vars = query.split(&quot;&amp;&quot;);\n    for (var i = 0; i &lt; vars.length; i++) {\n        var pair = vars[i].split(&quot;=&quot;);\n        if (pair[0] == key) {\n            return pair[1];\n        }\n    }\n}\n</code></pre>\n<p>taken from <a href=\"http://forums.asp.net/t/1771251.aspx/1\" rel=\"nofollow noreferrer\">here</a></p>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 1126637,
          "reputation": 23059,
          "user_id": 1113772,
          "user_type": "registered",
          "accept_rate": 100,
          "profile_image": "https://i.stack.imgur.com/uLSIj.png?s=128&g=1",
          "display_name": "Paul Sweatte",
          "link": "https://stackoverflow.com/users/1113772/paul-sweatte"
        },
        "up_vote_count": 641,
        "is_accepted": false,
        "community_owned_date": 1346113661,
        "score": 639,
        "last_activity_date": 1607161967,
        "last_edit_date": 1607161967,
        "creation_date": 1346113661,
        "answer_id": 12151322,
        "question_id": 901115,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "URLSearchParams\r\n===============\r\n\r\nFirefox 44+, Opera 36+, Edge 17+, Safari 10.3+ and Chrome 49+ support the [URLSearchParams][1] API:\r\n\r\n* [Chrome Announcement and details][2]\r\n* [Opera Announcement and details][3]\r\n* [Firefox Announcement and details][4]\r\n\r\nThere is a google-suggested **[URLSearchParams polyfill][7]** for the stable versions of IE.\r\n\r\nIt is not standardized by [W3C][5], but it is a living standard by [WhatWG][6].\r\n\r\nYou can use it on `location`:\r\n\r\n    const params = new URLSearchParams(location.search);\r\n\r\nor\r\n\r\n    const params = (new URL(location)).searchParams;\r\n\r\nOr of course on any URL:\r\n\r\n    const url = new URL(&#39;https://example.com?foo=1&amp;bar=2&#39;);\r\n    const params = new URLSearchParams(url.search);\r\n\r\nYou can get params also using a shorthand `.searchParams` property on the URL object, like this:\r\n\r\n    const params = new URL(&#39;https://example.com?foo=1&amp;bar=2&#39;).searchParams;\r\n    params.get(&#39;foo&#39;); // &quot;1&quot;\r\n    params.get(&#39;bar&#39;); // &quot;2&quot; \r\n\r\nYou read/set parameters through the `get(KEY)`, `set(KEY, VALUE)`, `append(KEY, VALUE)` API. You can also iterate over all values `for (let p of params) {}`.\r\n\r\n A [reference implementation][8] and a [sample page][9] are available for auditing and testing.\r\n\r\n  [1]: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\r\n  [2]: https://developers.google.com/web/updates/2016/01/urlsearchparams\r\n  [3]: https://dev.opera.com/blog/opera-36/\r\n  [4]: https://developer.mozilla.org/en-US/Firefox/Releases/44#Miscellaneous\r\n  [5]: https://www.w3.org/TR/2014/WD-url-1-20141209/#interface-urlsearchparams\r\n  [6]: https://url.spec.whatwg.org\r\n  [7]: https://github.com/WebReflection/url-search-params\r\n  [8]: https://trac.webkit.org/browser/trunk/Source/WebCore/platform/URLParser.cpp\r\n  [9]: https://googlechrome.github.io/samples/urlsearchparams/",
        "title": "How can I get query string values in JavaScript?",
        "body": "<h1>URLSearchParams</h1>\n<p>Firefox 44+, Opera 36+, Edge 17+, Safari 10.3+ and Chrome 49+ support the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" rel=\"noreferrer\">URLSearchParams</a> API:</p>\n<ul>\n<li><a href=\"https://developers.google.com/web/updates/2016/01/urlsearchparams\" rel=\"noreferrer\">Chrome Announcement and details</a></li>\n<li><a href=\"https://dev.opera.com/blog/opera-36/\" rel=\"noreferrer\">Opera Announcement and details</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/44#Miscellaneous\" rel=\"noreferrer\">Firefox Announcement and details</a></li>\n</ul>\n<p>There is a google-suggested <strong><a href=\"https://github.com/WebReflection/url-search-params\" rel=\"noreferrer\">URLSearchParams polyfill</a></strong> for the stable versions of IE.</p>\n<p>It is not standardized by <a href=\"https://www.w3.org/TR/2014/WD-url-1-20141209/#interface-urlsearchparams\" rel=\"noreferrer\">W3C</a>, but it is a living standard by <a href=\"https://url.spec.whatwg.org\" rel=\"noreferrer\">WhatWG</a>.</p>\n<p>You can use it on <code>location</code>:</p>\n<pre><code>const params = new URLSearchParams(location.search);\n</code></pre>\n<p>or</p>\n<pre><code>const params = (new URL(location)).searchParams;\n</code></pre>\n<p>Or of course on any URL:</p>\n<pre><code>const url = new URL('https://example.com?foo=1&amp;bar=2');\nconst params = new URLSearchParams(url.search);\n</code></pre>\n<p>You can get params also using a shorthand <code>.searchParams</code> property on the URL object, like this:</p>\n<pre><code>const params = new URL('https://example.com?foo=1&amp;bar=2').searchParams;\nparams.get('foo'); // &quot;1&quot;\nparams.get('bar'); // &quot;2&quot; \n</code></pre>\n<p>You read/set parameters through the <code>get(KEY)</code>, <code>set(KEY, VALUE)</code>, <code>append(KEY, VALUE)</code> API. You can also iterate over all values <code>for (let p of params) {}</code>.</p>\n<p>A <a href=\"https://trac.webkit.org/browser/trunk/Source/WebCore/platform/URLParser.cpp\" rel=\"noreferrer\">reference implementation</a> and a <a href=\"https://googlechrome.github.io/samples/urlsearchparams/\" rel=\"noreferrer\">sample page</a> are available for auditing and testing.</p>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 3582213,
          "reputation": 6696,
          "user_id": 2990144,
          "user_type": "registered",
          "accept_rate": 67,
          "profile_image": "https://www.gravatar.com/avatar/c65c7991822f827780a2cae38c5c31a2?s=128&d=identicon&r=PG",
          "display_name": "Seth Holladay",
          "link": "https://stackoverflow.com/users/2990144/seth-holladay"
        },
        "up_vote_count": 5,
        "is_accepted": false,
        "community_owned_date": 1389946859,
        "score": 2,
        "last_activity_date": 1600071276,
        "last_edit_date": 1600071276,
        "creation_date": 1389946859,
        "answer_id": 21181015,
        "question_id": 901115,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Doing this reliably is more involved than one may think at first.\r\n\r\n1. `location.search`, which is used in other answers, is brittle and should be avoided - for example, it returns empty if someone screws up and puts a `#fragment` identifier before the `?query` string.\r\n2. There are a number of ways URLs get automatically escaped in the browser, which makes `decodeURIComponent` pretty much mandatory, in my opinion.\r\n3. Many query strings are generated from user input, which means assumptions about the URL content are very bad. Including very basic things like that each key is unique or even has a value.\r\n\r\nTo solve this, here is a configurable API with a healthy dose of [defensive programming][1]. Note that it can be made half the size if you are willing to hardcode some of the variables, or if the input can never include `hasOwnProperty`, etc.\r\n\r\n**Version 1:** Returns a data object with names and values for each parameter. It effectively de-duplicates them and always respects the first one found from left-to-right.\r\n\r\n    function getQueryData(url, paramKey, pairKey, missingValue, decode) {\r\n\r\n        var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;\r\n\r\n        if (!url || typeof url !== &#39;string&#39;) {\r\n            url = location.href; // more robust than location.search, which is flaky\r\n        }\r\n        if (!paramKey || typeof paramKey !== &#39;string&#39;) {\r\n            paramKey = &#39;&amp;&#39;;\r\n        }\r\n        if (!pairKey || typeof pairKey !== &#39;string&#39;) {\r\n            pairKey = &#39;=&#39;;\r\n        }\r\n        // when you do not explicitly tell the API...\r\n        if (arguments.length &lt; 5) {\r\n            // it will unescape parameter keys and values by default...\r\n            decode = true;\r\n        }\r\n\r\n        queryStart = url.indexOf(&#39;?&#39;);\r\n        if (queryStart &gt;= 0) {\r\n            // grab everything after the very first ? question mark...\r\n            query = url.substring(queryStart + 1);\r\n        } else {\r\n            // assume the input is already parameter data...\r\n            query = url;\r\n        }\r\n        // remove fragment identifiers...\r\n        fragStart = query.indexOf(&#39;#&#39;);\r\n        if (fragStart &gt;= 0) {\r\n            // remove everything after the first # hash mark...\r\n            query = query.substring(0, fragStart);\r\n        }\r\n        // make sure at this point we have enough material to do something useful...\r\n        if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {\r\n            // we no longer need the whole query, so get the parameters...\r\n            query = query.split(paramKey);\r\n            result = {};\r\n            // loop through the parameters...\r\n            for (i = 0, len = query.length; i &lt; len; i = i + 1) {\r\n                pairKeyStart = query[i].indexOf(pairKey);\r\n                if (pairKeyStart &gt;= 0) {\r\n                    name = query[i].substring(0, pairKeyStart);\r\n                } else {\r\n                    name = query[i];\r\n                }\r\n                // only continue for non-empty names that we have not seen before...\r\n                if (name &amp;&amp; !Object.prototype.hasOwnProperty.call(result, name)) {\r\n                    if (decode) {\r\n                        // unescape characters with special meaning like ? and #\r\n                        name = decodeURIComponent(name);\r\n                    }\r\n                    if (pairKeyStart &gt;= 0) {\r\n                        value = query[i].substring(pairKeyStart + 1);\r\n                        if (value) {\r\n                            if (decode) {\r\n                                value = decodeURIComponent(value);\r\n                            }\r\n                        } else {\r\n                            value = missingValue;\r\n                        }\r\n                    } else {\r\n                        value = missingValue;\r\n                    }\r\n                    result[name] = value;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n**Version 2:** Returns a data map object with two identical length arrays, one for names and one for values, with an index for each parameter. This one supports duplicate names and intentionally does not de-duplicate them, because that is probably why you would want to use this format.\r\n\r\n```js\r\nfunction getQueryData(url, paramKey, pairKey, missingValue, decode) {\r\n\r\n    var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;\r\n\r\n    if (!url || typeof url !== &#39;string&#39;) {\r\n          url = location.href; // more robust than location.search, which is flaky\r\n    }\r\n        if (!paramKey || typeof paramKey !== &#39;string&#39;) {\r\n            paramKey = &#39;&amp;&#39;;\r\n        }\r\n        if (!pairKey || typeof pairKey !== &#39;string&#39;) {\r\n            pairKey = &#39;=&#39;;\r\n        }\r\n        // when you do not explicitly tell the API...\r\n        if (arguments.length &lt; 5) {\r\n            // it will unescape parameter keys and values by default...\r\n            decode = true;\r\n        }\r\n\r\n        queryStart = url.indexOf(&#39;?&#39;);\r\n        if (queryStart &gt;= 0) {\r\n            // grab everything after the very first ? question mark...\r\n            query = url.substring(queryStart + 1);\r\n        } else {\r\n            // assume the input is already parameter data...\r\n            query = url;\r\n        }\r\n        // remove fragment identifiers...\r\n        fragStart = query.indexOf(&#39;#&#39;);\r\n        if (fragStart &gt;= 0) {\r\n            // remove everything after the first # hash mark...\r\n            query = query.substring(0, fragStart);\r\n        }\r\n        // make sure at this point we have enough material to do something useful...\r\n        if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {\r\n            // we no longer need the whole query, so get the parameters...\r\n            query = query.split(paramKey);\r\n            result = {\r\n                names: [],\r\n                values: []\r\n            };\r\n            // loop through the parameters...\r\n            for (i = 0, len = query.length; i &lt; len; i = i + 1) {\r\n                pairKeyStart = query[i].indexOf(pairKey);\r\n                if (pairKeyStart &gt;= 0) {\r\n                    name = query[i].substring(0, pairKeyStart);\r\n                } else {\r\n                    name = query[i];\r\n                }\r\n                // only continue for non-empty names...\r\n                if (name) {\r\n                    if (decode) {\r\n                        // unescape characters with special meaning like ? and #\r\n                        name = decodeURIComponent(name);\r\n                    }\r\n                    if (pairKeyStart &gt;= 0) {\r\n                        value = query[i].substring(pairKeyStart + 1);\r\n                        if (value) {\r\n                            if (decode) {\r\n                                value = decodeURIComponent(value);\r\n                            }\r\n                        } else {\r\n                            value = missingValue;\r\n                        }\r\n                    } else {\r\n                        value = missingValue;\r\n                    }\r\n                    result.names.push(name);\r\n                    result.values.push(value);\r\n                }\r\n           }\r\n           return result;\r\n       }\r\n   }\r\n```\r\n\r\n  [1]: http://en.wikipedia.org/wiki/Defensive_programming &quot;Wiki article on programming with less assumptions.&quot;",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Doing this reliably is more involved than one may think at first.</p>\n<ol>\n<li><code>location.search</code>, which is used in other answers, is brittle and should be avoided - for example, it returns empty if someone screws up and puts a <code>#fragment</code> identifier before the <code>?query</code> string.</li>\n<li>There are a number of ways URLs get automatically escaped in the browser, which makes <code>decodeURIComponent</code> pretty much mandatory, in my opinion.</li>\n<li>Many query strings are generated from user input, which means assumptions about the URL content are very bad. Including very basic things like that each key is unique or even has a value.</li>\n</ol>\n<p>To solve this, here is a configurable API with a healthy dose of <a href=\"http://en.wikipedia.org/wiki/Defensive_programming\" rel=\"nofollow noreferrer\" title=\"Wiki article on programming with less assumptions.\">defensive programming</a>. Note that it can be made half the size if you are willing to hardcode some of the variables, or if the input can never include <code>hasOwnProperty</code>, etc.</p>\n<p><strong>Version 1:</strong> Returns a data object with names and values for each parameter. It effectively de-duplicates them and always respects the first one found from left-to-right.</p>\n<pre><code>function getQueryData(url, paramKey, pairKey, missingValue, decode) {\n\n    var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;\n\n    if (!url || typeof url !== 'string') {\n        url = location.href; // more robust than location.search, which is flaky\n    }\n    if (!paramKey || typeof paramKey !== 'string') {\n        paramKey = '&amp;';\n    }\n    if (!pairKey || typeof pairKey !== 'string') {\n        pairKey = '=';\n    }\n    // when you do not explicitly tell the API...\n    if (arguments.length &lt; 5) {\n        // it will unescape parameter keys and values by default...\n        decode = true;\n    }\n\n    queryStart = url.indexOf('?');\n    if (queryStart &gt;= 0) {\n        // grab everything after the very first ? question mark...\n        query = url.substring(queryStart + 1);\n    } else {\n        // assume the input is already parameter data...\n        query = url;\n    }\n    // remove fragment identifiers...\n    fragStart = query.indexOf('#');\n    if (fragStart &gt;= 0) {\n        // remove everything after the first # hash mark...\n        query = query.substring(0, fragStart);\n    }\n    // make sure at this point we have enough material to do something useful...\n    if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {\n        // we no longer need the whole query, so get the parameters...\n        query = query.split(paramKey);\n        result = {};\n        // loop through the parameters...\n        for (i = 0, len = query.length; i &lt; len; i = i + 1) {\n            pairKeyStart = query[i].indexOf(pairKey);\n            if (pairKeyStart &gt;= 0) {\n                name = query[i].substring(0, pairKeyStart);\n            } else {\n                name = query[i];\n            }\n            // only continue for non-empty names that we have not seen before...\n            if (name &amp;&amp; !Object.prototype.hasOwnProperty.call(result, name)) {\n                if (decode) {\n                    // unescape characters with special meaning like ? and #\n                    name = decodeURIComponent(name);\n                }\n                if (pairKeyStart &gt;= 0) {\n                    value = query[i].substring(pairKeyStart + 1);\n                    if (value) {\n                        if (decode) {\n                            value = decodeURIComponent(value);\n                        }\n                    } else {\n                        value = missingValue;\n                    }\n                } else {\n                    value = missingValue;\n                }\n                result[name] = value;\n            }\n        }\n        return result;\n    }\n}\n</code></pre>\n<p><strong>Version 2:</strong> Returns a data map object with two identical length arrays, one for names and one for values, with an index for each parameter. This one supports duplicate names and intentionally does not de-duplicate them, because that is probably why you would want to use this format.</p>\n<pre class=\"lang-js prettyprint-override\"><code>function getQueryData(url, paramKey, pairKey, missingValue, decode) {\n\n    var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;\n\n    if (!url || typeof url !== 'string') {\n          url = location.href; // more robust than location.search, which is flaky\n    }\n        if (!paramKey || typeof paramKey !== 'string') {\n            paramKey = '&amp;';\n        }\n        if (!pairKey || typeof pairKey !== 'string') {\n            pairKey = '=';\n        }\n        // when you do not explicitly tell the API...\n        if (arguments.length &lt; 5) {\n            // it will unescape parameter keys and values by default...\n            decode = true;\n        }\n\n        queryStart = url.indexOf('?');\n        if (queryStart &gt;= 0) {\n            // grab everything after the very first ? question mark...\n            query = url.substring(queryStart + 1);\n        } else {\n            // assume the input is already parameter data...\n            query = url;\n        }\n        // remove fragment identifiers...\n        fragStart = query.indexOf('#');\n        if (fragStart &gt;= 0) {\n            // remove everything after the first # hash mark...\n            query = query.substring(0, fragStart);\n        }\n        // make sure at this point we have enough material to do something useful...\n        if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {\n            // we no longer need the whole query, so get the parameters...\n            query = query.split(paramKey);\n            result = {\n                names: [],\n                values: []\n            };\n            // loop through the parameters...\n            for (i = 0, len = query.length; i &lt; len; i = i + 1) {\n                pairKeyStart = query[i].indexOf(pairKey);\n                if (pairKeyStart &gt;= 0) {\n                    name = query[i].substring(0, pairKeyStart);\n                } else {\n                    name = query[i];\n                }\n                // only continue for non-empty names...\n                if (name) {\n                    if (decode) {\n                        // unescape characters with special meaning like ? and #\n                        name = decodeURIComponent(name);\n                    }\n                    if (pairKeyStart &gt;= 0) {\n                        value = query[i].substring(pairKeyStart + 1);\n                        if (value) {\n                            if (decode) {\n                                value = decodeURIComponent(value);\n                            }\n                        } else {\n                            value = missingValue;\n                        }\n                    } else {\n                        value = missingValue;\n                    }\n                    result.names.push(name);\n                    result.values.push(value);\n                }\n           }\n           return result;\n       }\n   }\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 33608,
          "reputation": 314939,
          "user_id": 94197,
          "user_type": "registered",
          "accept_rate": 92,
          "profile_image": "https://www.gravatar.com/avatar/c3203aa647aeb214c463c59f1af2c38f?s=128&d=identicon&r=PG",
          "display_name": "Andy E",
          "link": "https://stackoverflow.com/users/94197/andy-e"
        },
        "up_vote_count": 1771,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 1755,
        "last_activity_date": 1585509624,
        "last_edit_date": 1585509624,
        "creation_date": 1274434156,
        "answer_id": 2880929,
        "question_id": 901115,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Some of the solutions posted here are inefficient. Repeating the regular expression search every time the script needs to access a parameter is completely unnecessary, one single function to split up the parameters into an associative-array style object is enough. If you&#39;re not working with the HTML 5 History API, this is only necessary once per page load.  The other suggestions here also fail to decode the URL correctly.\r\n\r\n&lt;pre&gt;&lt;code&gt;var urlParams;\r\n(window.&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/window.onpopstate&quot;&gt;onpopstate&lt;/a&gt; = function () {\r\n    var match,\r\n        pl     = /\\+/g,  // Regex for replacing addition symbol with a space\r\n        search = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n        decode = function (s) { return &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURIComponent&quot;&gt;decodeURIComponent&lt;/a&gt;(s.replace(pl, &quot; &quot;)); },\r\n        query  = window.&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/window.location&quot;&gt;location&lt;/a&gt;.search.&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substring&quot;&gt;substring&lt;/a&gt;(1);\r\n  \r\n    urlParams = {};\r\n    while (match = search.&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec&quot;&gt;exec&lt;/a&gt;(query))\r\n       urlParams[decode(match[1])] = decode(match[2]);\r\n})();&lt;/code&gt;&lt;/pre&gt;\r\n\r\nExample querystring: \r\n \r\n&gt; `?i=main&amp;mode=front&amp;sid=de8d49b78a85a322c4155015fdce22c4&amp;enc=+Hello%20&amp;empty`\r\n\r\nResult:\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n     urlParams = {\r\n        enc: &quot; Hello &quot;,\r\n        i: &quot;main&quot;,\r\n        mode: &quot;front&quot;,\r\n        sid: &quot;de8d49b78a85a322c4155015fdce22c4&quot;,\r\n        empty: &quot;&quot;\r\n    }\r\n\r\n    alert(urlParams[&quot;mode&quot;]);\r\n    // -&gt; &quot;front&quot;\r\n\r\n    alert(&quot;empty&quot; in urlParams);\r\n    // -&gt; true\r\n\r\n\r\nThis could easily be improved upon to handle array-style query strings too.  An example of this is [here](http://jsbin.com/adali3/2), but since array-style parameters aren&#39;t defined in [RFC 3986](http://tools.ietf.org/html/rfc3986) I won&#39;t pollute this answer with the source code. [For those interested in a &quot;polluted&quot; version, look at campbeln&#39;s answer below][1].\r\n\r\nAlso, as pointed out in the comments, `;` is a legal delimiter for `key=value` pairs.  It would require a more complicated regex to handle `;` or `&amp;`, which I think is unnecessary because it&#39;s rare that `;` is used and I would say even more unlikely that both would be used.  If you need to support `;` instead of `&amp;`, just swap them in the regex.\r\n\r\n&lt;hr /&gt; \r\nIf you&#39;re using a server-side preprocessing language, you might want to use its native JSON functions to do the heavy lifting for you.  For example, in PHP you can write:\r\n\r\n&lt;pre&gt;&lt;code&gt;&amp;lt;script&gt;var urlParams = &amp;lt;?php echo &lt;a href=&quot;http://php.net/manual/en/function.json-encode.php&quot;&gt;json_encode&lt;/a&gt;($_GET, JSON_HEX_TAG);?&gt;;&amp;lt;/script&gt;&lt;/code&gt;&lt;/pre&gt;\r\n\r\nMuch simpler!\r\n\r\n#UPDATED\r\n&gt; A new capability would be to retrieve repeated params as following `myparam=1&amp;myparam=2`. There is not a _specification_, however, most of the current approaches follow the generation of an array.\r\n\r\n    myparam = [&quot;1&quot;, &quot;2&quot;]\r\n\r\nSo, this is the approach to manage it:\r\n\r\n    let urlParams = {};\r\n    (window.onpopstate = function () {\r\n        let match,\r\n            pl = /\\+/g,  // Regex for replacing addition symbol with a space\r\n            search = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n            decode = function (s) {\r\n                return decodeURIComponent(s.replace(pl, &quot; &quot;));\r\n            },\r\n            query = window.location.search.substring(1);\r\n    \r\n        while (match = search.exec(query)) {\r\n            if (decode(match[1]) in urlParams) {\r\n                if (!Array.isArray(urlParams[decode(match[1])])) {\r\n                    urlParams[decode(match[1])] = [urlParams[decode(match[1])]];\r\n                }\r\n                urlParams[decode(match[1])].push(decode(match[2]));\r\n            } else {\r\n                urlParams[decode(match[1])] = decode(match[2]);\r\n            }\r\n        }\r\n    })();\r\n\r\n\r\n  [1]: https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/23401756#23401756",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Some of the solutions posted here are inefficient. Repeating the regular expression search every time the script needs to access a parameter is completely unnecessary, one single function to split up the parameters into an associative-array style object is enough. If you're not working with the HTML 5 History API, this is only necessary once per page load.  The other suggestions here also fail to decode the URL correctly.</p>\n\n<pre><code>var urlParams;\n(window.<a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.onpopstate\" rel=\"noreferrer\">onpopstate</a> = function () {\n    var match,\n        pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n        search = /([^&=]+)=?([^&]*)/g,\n        decode = function (s) { return <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURIComponent\" rel=\"noreferrer\">decodeURIComponent</a>(s.replace(pl, \" \")); },\n        query  = window.<a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.location\" rel=\"noreferrer\">location</a>.search.<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substring\" rel=\"noreferrer\">substring</a>(1);\n\n    urlParams = {};\n    while (match = search.<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec\" rel=\"noreferrer\">exec</a>(query))\n       urlParams[decode(match[1])] = decode(match[2]);\n})();</code></pre>\n\n<p>Example querystring: </p>\n\n<blockquote>\n  <p><code>?i=main&amp;mode=front&amp;sid=de8d49b78a85a322c4155015fdce22c4&amp;enc=+Hello%20&amp;empty</code></p>\n</blockquote>\n\n<p>Result:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code> urlParams = {\n    enc: \" Hello \",\n    i: \"main\",\n    mode: \"front\",\n    sid: \"de8d49b78a85a322c4155015fdce22c4\",\n    empty: \"\"\n}\n\nalert(urlParams[\"mode\"]);\n// -&gt; \"front\"\n\nalert(\"empty\" in urlParams);\n// -&gt; true\n</code></pre>\n\n<p>This could easily be improved upon to handle array-style query strings too.  An example of this is <a href=\"http://jsbin.com/adali3/2\" rel=\"noreferrer\">here</a>, but since array-style parameters aren't defined in <a href=\"http://tools.ietf.org/html/rfc3986\" rel=\"noreferrer\">RFC 3986</a> I won't pollute this answer with the source code. <a href=\"https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/23401756#23401756\">For those interested in a \"polluted\" version, look at campbeln's answer below</a>.</p>\n\n<p>Also, as pointed out in the comments, <code>;</code> is a legal delimiter for <code>key=value</code> pairs.  It would require a more complicated regex to handle <code>;</code> or <code>&amp;</code>, which I think is unnecessary because it's rare that <code>;</code> is used and I would say even more unlikely that both would be used.  If you need to support <code>;</code> instead of <code>&amp;</code>, just swap them in the regex.</p>\n\n<p><hr /> \nIf you're using a server-side preprocessing language, you might want to use its native JSON functions to do the heavy lifting for you.  For example, in PHP you can write:</p>\n\n<pre><code>&lt;script>var urlParams = &lt;?php echo <a href=\"http://php.net/manual/en/function.json-encode.php\" rel=\"noreferrer\">json_encode</a>($_GET, JSON_HEX_TAG);?>;&lt;/script></code></pre>\n\n<p>Much simpler!</p>\n\n<h1>UPDATED</h1>\n\n<blockquote>\n  <p>A new capability would be to retrieve repeated params as following <code>myparam=1&amp;myparam=2</code>. There is not a <em>specification</em>, however, most of the current approaches follow the generation of an array.</p>\n</blockquote>\n\n<pre><code>myparam = [\"1\", \"2\"]\n</code></pre>\n\n<p>So, this is the approach to manage it:</p>\n\n<pre><code>let urlParams = {};\n(window.onpopstate = function () {\n    let match,\n        pl = /\\+/g,  // Regex for replacing addition symbol with a space\n        search = /([^&amp;=]+)=?([^&amp;]*)/g,\n        decode = function (s) {\n            return decodeURIComponent(s.replace(pl, \" \"));\n        },\n        query = window.location.search.substring(1);\n\n    while (match = search.exec(query)) {\n        if (decode(match[1]) in urlParams) {\n            if (!Array.isArray(urlParams[decode(match[1])])) {\n                urlParams[decode(match[1])] = [urlParams[decode(match[1])]];\n            }\n            urlParams[decode(match[1])].push(decode(match[2]));\n        } else {\n            urlParams[decode(match[1])] = decode(match[2]);\n        }\n    }\n})();\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 316124,
          "reputation": 6446,
          "user_id": 632117,
          "user_type": "registered",
          "profile_image": "https://www.gravatar.com/avatar/6d52d4ee75d92583bfde4a1854090495?s=128&d=identicon&r=PG",
          "display_name": "Anatoly Mironov",
          "link": "https://stackoverflow.com/users/632117/anatoly-mironov"
        },
        "up_vote_count": 66,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 65,
        "last_activity_date": 1554921899,
        "last_edit_date": 1554921899,
        "creation_date": 1326238568,
        "answer_id": 8812157,
        "question_id": 901115,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I like [Ryan Phelan&#39;s solution](https://stackoverflow.com/a/3867610/632117). But I don&#39;t see any point of extending jQuery for that? There is no usage of jQuery functionality.\r\n\r\nOn the other hand, I like the built-in function in Google Chrome: window.location.getParameter.\r\n\r\nSo why not to use this? Okay, other browsers don&#39;t have. So let&#39;s create this function if it does not exist:\r\n\r\n    if (!window.location.getParameter ) {\r\n      window.location.getParameter = function(key) {\r\n    \tfunction parseParams() {\r\n    \t\tvar params = {},\r\n    \t\t\te,\r\n    \t\t\ta = /\\+/g,  // Regex for replacing addition symbol with a space\r\n    \t\t\tr = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n    \t\t\td = function (s) { return decodeURIComponent(s.replace(a, &quot; &quot;)); },\r\n    \t\t\tq = window.location.search.substring(1);\r\n    \r\n    \t\twhile (e = r.exec(q))\r\n    \t\t\tparams[d(e[1])] = d(e[2]);\r\n    \r\n    \t\treturn params;\r\n    \t}\r\n    \r\n    \tif (!this.queryStringParams)\r\n    \t\tthis.queryStringParams = parseParams(); \r\n    \r\n    \treturn this.queryStringParams[key];\r\n      };\r\n    }\r\n\r\nThis function is more or less from Ryan Phelan, but it is wrapped differently: clear name and no dependencies of other javascript libraries. [More about this function on my blog](http://sharepointkunskap.wordpress.com/2012/01/11/get-url-parameters-with-javascript/).",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>I like <a href=\"https://stackoverflow.com/a/3867610/632117\">Ryan Phelan's solution</a>. But I don't see any point of extending jQuery for that? There is no usage of jQuery functionality.</p>\n\n<p>On the other hand, I like the built-in function in Google Chrome: window.location.getParameter.</p>\n\n<p>So why not to use this? Okay, other browsers don't have. So let's create this function if it does not exist:</p>\n\n<pre><code>if (!window.location.getParameter ) {\n  window.location.getParameter = function(key) {\n    function parseParams() {\n        var params = {},\n            e,\n            a = /\\+/g,  // Regex for replacing addition symbol with a space\n            r = /([^&amp;=]+)=?([^&amp;]*)/g,\n            d = function (s) { return decodeURIComponent(s.replace(a, \" \")); },\n            q = window.location.search.substring(1);\n\n        while (e = r.exec(q))\n            params[d(e[1])] = d(e[2]);\n\n        return params;\n    }\n\n    if (!this.queryStringParams)\n        this.queryStringParams = parseParams(); \n\n    return this.queryStringParams[key];\n  };\n}\n</code></pre>\n\n<p>This function is more or less from Ryan Phelan, but it is wrapped differently: clear name and no dependencies of other javascript libraries. <a href=\"http://sharepointkunskap.wordpress.com/2012/01/11/get-url-parameters-with-javascript/\" rel=\"noreferrer\">More about this function on my blog</a>.</p>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 185517,
          "reputation": 16921,
          "user_id": 422288,
          "user_type": "registered",
          "accept_rate": 45,
          "profile_image": "https://www.gravatar.com/avatar/19446735ca351e39f7af42590a2041ff?s=128&d=identicon&r=PG",
          "display_name": "Eneko Alonso",
          "link": "https://stackoverflow.com/users/422288/eneko-alonso"
        },
        "up_vote_count": 20,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 17,
        "last_activity_date": 1547809174,
        "last_edit_date": 1547809174,
        "creation_date": 1304467159,
        "answer_id": 5877077,
        "question_id": 901115,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I would rather use `split()` instead of Regex for this operation:\r\n\r\n\tfunction getUrlParams() {\r\n\t\tvar result = {};\r\n\t\tvar params = (window.location.search.split(&#39;?&#39;)[1] || &#39;&#39;).split(&#39;&amp;&#39;);\r\n\t\tfor(var param in params) {\r\n\t\t    if (params.hasOwnProperty(param)) {\r\n\t\t        var paramParts = params[param].split(&#39;=&#39;);\r\n\t\t        result[paramParts[0]] = decodeURIComponent(paramParts[1] || &quot;&quot;);\r\n\t\t    }\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>I would rather use <code>split()</code> instead of Regex for this operation:</p>\n\n<pre><code>function getUrlParams() {\n    var result = {};\n    var params = (window.location.search.split('?')[1] || '').split('&amp;');\n    for(var param in params) {\n        if (params.hasOwnProperty(param)) {\n            var paramParts = params[param].split('=');\n            result[paramParts[0]] = decodeURIComponent(paramParts[1] || \"\");\n        }\n    }\n    return result;\n}\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 1194711,
          "reputation": 5111,
          "user_id": 1166675,
          "user_type": "registered",
          "profile_image": "https://www.gravatar.com/avatar/ec7337b68edc84206fe37b1f711c1894?s=128&d=identicon&r=PG",
          "display_name": "nkh",
          "link": "https://stackoverflow.com/users/1166675/nkh"
        },
        "up_vote_count": 28,
        "is_accepted": false,
        "community_owned_date": 1368535630,
        "score": 27,
        "last_activity_date": 1546375318,
        "last_edit_date": 1546375318,
        "creation_date": 1368535630,
        "answer_id": 16543587,
        "question_id": 901115,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "\r\nIf you are using Browserify, you can use the `url` module from *Node.js*:\r\n\r\n    var url = require(&#39;url&#39;);\r\n    \r\n    url.parse(&#39;http://example.com/?bob=123&#39;, true).query;\r\n\r\n    // returns { &quot;bob&quot;: &quot;123&quot; }\r\n\r\nFurther reading: [**URL Node.js v0.12.2 Manual &amp; Documentation**](http://nodejs.org/api/url.html)\r\n\r\n\r\n\r\n**EDIT:** You can use [URL][3] interface, its quite widely adopted in almost all the new browser and if the code is going to run on an old browser you can use a [polyfill like this one][1]. Here&#39;s a code example on how to use URL interface to get query parameters (aka search parameters)\r\n\r\n    const url = new URL(&#39;http://example.com/?bob=123&#39;);\r\n    url.searchParams.get(&#39;bob&#39;); \r\n\r\nYou can also use URLSearchParams for it, here&#39;s [an example from MDN][2] to do it with URLSearchParams:\r\n\r\n    var paramsString = &quot;q=URLUtils.searchParams&amp;topic=api&quot;;\r\n    var searchParams = new URLSearchParams(paramsString);\r\n    \r\n    //Iterate the search parameters.\r\n    for (let p of searchParams) {\r\n      console.log(p);\r\n    }\r\n    \r\n    searchParams.has(&quot;topic&quot;) === true; // true\r\n    searchParams.get(&quot;topic&quot;) === &quot;api&quot;; // true\r\n    searchParams.getAll(&quot;topic&quot;); // [&quot;api&quot;]\r\n    searchParams.get(&quot;foo&quot;) === null; // true\r\n    searchParams.append(&quot;topic&quot;, &quot;webdev&quot;);\r\n    searchParams.toString(); // &quot;q=URLUtils.searchParams&amp;topic=api&amp;topic=webdev&quot;\r\n    searchParams.set(&quot;topic&quot;, &quot;More webdev&quot;);\r\n    searchParams.toString(); // &quot;q=URLUtils.searchParams&amp;topic=More+webdev&quot;\r\n    searchParams.delete(&quot;topic&quot;);\r\n    searchParams.toString(); // &quot;q=URLUtils.searchParams&quot;\r\n\r\n\r\n[3]: https://developer.mozilla.org/en-US/docs/Web/API/URL\r\n[1]: https://github.com/lifaon74/url-polyfill\r\n[2]: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Example",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>If you are using Browserify, you can use the <code>url</code> module from <em>Node.js</em>:</p>\n\n<pre><code>var url = require('url');\n\nurl.parse('http://example.com/?bob=123', true).query;\n\n// returns { \"bob\": \"123\" }\n</code></pre>\n\n<p>Further reading: <a href=\"http://nodejs.org/api/url.html\" rel=\"noreferrer\"><strong>URL Node.js v0.12.2 Manual &amp; Documentation</strong></a></p>\n\n<p><strong>EDIT:</strong> You can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URL\" rel=\"noreferrer\">URL</a> interface, its quite widely adopted in almost all the new browser and if the code is going to run on an old browser you can use a <a href=\"https://github.com/lifaon74/url-polyfill\" rel=\"noreferrer\">polyfill like this one</a>. Here's a code example on how to use URL interface to get query parameters (aka search parameters)</p>\n\n<pre><code>const url = new URL('http://example.com/?bob=123');\nurl.searchParams.get('bob'); \n</code></pre>\n\n<p>You can also use URLSearchParams for it, here's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams#Example\" rel=\"noreferrer\">an example from MDN</a> to do it with URLSearchParams:</p>\n\n<pre><code>var paramsString = \"q=URLUtils.searchParams&amp;topic=api\";\nvar searchParams = new URLSearchParams(paramsString);\n\n//Iterate the search parameters.\nfor (let p of searchParams) {\n  console.log(p);\n}\n\nsearchParams.has(\"topic\") === true; // true\nsearchParams.get(\"topic\") === \"api\"; // true\nsearchParams.getAll(\"topic\"); // [\"api\"]\nsearchParams.get(\"foo\") === null; // true\nsearchParams.append(\"topic\", \"webdev\");\nsearchParams.toString(); // \"q=URLUtils.searchParams&amp;topic=api&amp;topic=webdev\"\nsearchParams.set(\"topic\", \"More webdev\");\nsearchParams.toString(); // \"q=URLUtils.searchParams&amp;topic=More+webdev\"\nsearchParams.delete(\"topic\");\nsearchParams.toString(); // \"q=URLUtils.searchParams\"\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 136917,
          "reputation": 89748,
          "user_id": 340760,
          "user_type": "registered",
          "accept_rate": 86,
          "profile_image": "https://www.gravatar.com/avatar/ef1a0f00d57917768acdc5b379ca1b28?s=128&d=identicon&r=PG",
          "display_name": "BrunoLM",
          "link": "https://stackoverflow.com/users/340760/brunolm"
        },
        "up_vote_count": 1311,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 1303,
        "last_activity_date": 1542122224,
        "last_edit_date": 1592644375,
        "creation_date": 1286196784,
        "answer_id": 3855394,
        "question_id": 901115,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "# ES2015 (ES6)\n\n    getQueryStringParams = query =&gt; {\n        return query\n            ? (/^[?#]/.test(query) ? query.slice(1) : query)\n                .split(&#39;&amp;&#39;)\n                .reduce((params, param) =&gt; {\n                        let [key, value] = param.split(&#39;=&#39;);\n                        params[key] = value ? decodeURIComponent(value.replace(/\\+/g, &#39; &#39;)) : &#39;&#39;;\n                        return params;\n                    }, {}\n                )\n            : {}\n    };\n\n----------\n\n## Without jQuery ##\n\n    var qs = (function(a) {\n        if (a == &quot;&quot;) return {};\n        var b = {};\n        for (var i = 0; i &lt; a.length; ++i)\n        {\n            var p=a[i].split(&#39;=&#39;, 2);\n            if (p.length == 1)\n                b[p[0]] = &quot;&quot;;\n            else\n                b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, &quot; &quot;));\n        }\n        return b;\n    })(window.location.search.substr(1).split(&#39;&amp;&#39;));\n\nWith an URL like `?topic=123&amp;name=query+string`, the following will return:\n\n    qs[&quot;topic&quot;];    // 123\n    qs[&quot;name&quot;];     // query string\n    qs[&quot;nothere&quot;];  // undefined (object)\n\n----------\n\n## Google method ##\n\nTearing Google&#39;s code I found the method they use: `getUrlParameters`\n\n    function (b) {\n        var c = typeof b === &quot;undefined&quot;;\n        if (a !== h &amp;&amp; c) return a;\n        for (var d = {}, b = b || k[B][vb], e = b[p](&quot;?&quot;), f = b[p](&quot;#&quot;), b = (f === -1 ? b[Ya](e + 1) : [b[Ya](e + 1, f - e - 1), &quot;&amp;&quot;, b[Ya](f + 1)][K](&quot;&quot;))[z](&quot;&amp;&quot;), e = i.dd ? ia : unescape, f = 0, g = b[w]; f &lt; g; ++f) {\n            var l = b[f][p](&quot;=&quot;);\n            if (l !== -1) {\n                var q = b[f][I](0, l),\n                    l = b[f][I](l + 1),\n                    l = l[Ca](/\\+/g, &quot; &quot;);\n                try {\n                    d[q] = e(l)\n                } catch (A) {}\n            }\n        }\n        c &amp;&amp; (a = d);\n        return d\n    }\n\nIt is obfuscated, but it is understandable. It does not work because some variables are undefined.\n\nThey start to look for parameters on the url from `?` and also from the hash `#`. Then for each parameter they split in the equal sign `b[f][p](&quot;=&quot;)` (which looks like `indexOf`, they use the position of the char to get the key/value). Having it split they check whether the parameter has a value or not, if it has then they store the value of `d`, otherwise they just continue.\n\nIn the end the object `d` is returned, handling escaping and the `+` sign. This object is just like mine, it has the same behavior.\n\n----------\n\nMy method as a **jQuery plugin**\n\n    (function($) {\n        $.QueryString = (function(paramsArray) {\n            let params = {};\n\n            for (let i = 0; i &lt; paramsArray.length; ++i)\n            {\n                let param = paramsArray[i]\n                    .split(&#39;=&#39;, 2);\n                \n                if (param.length !== 2)\n                    continue;\n                \n                params[param[0]] = decodeURIComponent(param[1].replace(/\\+/g, &quot; &quot;));\n            }\n                \n            return params;\n        })(window.location.search.substr(1).split(&#39;&amp;&#39;))\n    })(jQuery);\n\nUsage\n\n    //Get a param\n    $.QueryString.param\n    //-or-\n    $.QueryString[&quot;param&quot;]\n    //This outputs something like...\n    //&quot;val&quot;\n\n    //Get all params as object\n    $.QueryString\n    //This outputs something like...\n    //Object { param: &quot;val&quot;, param2: &quot;val&quot; }\n\n    //Set a param (only in the $.QueryString object, doesn&#39;t affect the browser&#39;s querystring)\n    $.QueryString.param = &quot;newvalue&quot;\n    //This doesn&#39;t output anything, it just updates the $.QueryString object\n\n    //Convert object into string suitable for url a querystring (Requires jQuery)\n    $.param($.QueryString)\n    //This outputs something like...\n    //&quot;param=newvalue&amp;param2=val&quot;\n\n    //Update the url/querystring in the browser&#39;s location bar with the $.QueryString object\n    history.replaceState({}, &#39;&#39;, &quot;?&quot; + $.param($.QueryString));\n    //-or-\n    history.pushState({}, &#39;&#39;, &quot;?&quot; + $.param($.QueryString));\n\n\n----------\n\n## [Performance test (split method against regex method)][1] ([jsPerf][2]) ##\n\nPreparation code: methods declaration\n\n### Split test code ###\n\n    var qs = window.GetQueryString(query);\n    \n    var search = qs[&quot;q&quot;];\n    var value = qs[&quot;value&quot;];\n    var undef = qs[&quot;undefinedstring&quot;];\n\n### Regex test code ###\n\n    var search = window.getParameterByName(&quot;q&quot;);\n    var value = window.getParameterByName(&quot;value&quot;);\n    var undef = window.getParameterByName(&quot;undefinedstring&quot;);\n\n**Testing in Firefox 4.0 x86 on Windows Server 2008 R2 / 7 x64**\n\n - **Split method**: 144,780 &#177;2.17% fastest\n - **Regex method**: 13,891 &#177;0.85% | 90% slower\n\n\n  [1]: http://jsperf.com/querystring-with-javascript\n  [2]: http://jsperf.com/",
        "title": "How can I get query string values in JavaScript?",
        "body": "<h1>ES2015 (ES6)</h1>\n<pre><code>getQueryStringParams = query =&gt; {\n    return query\n        ? (/^[?#]/.test(query) ? query.slice(1) : query)\n            .split('&amp;')\n            .reduce((params, param) =&gt; {\n                    let [key, value] = param.split('=');\n                    params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n                    return params;\n                }, {}\n            )\n        : {}\n};\n</code></pre>\n<hr />\n<h2>Without jQuery</h2>\n<pre><code>var qs = (function(a) {\n    if (a == &quot;&quot;) return {};\n    var b = {};\n    for (var i = 0; i &lt; a.length; ++i)\n    {\n        var p=a[i].split('=', 2);\n        if (p.length == 1)\n            b[p[0]] = &quot;&quot;;\n        else\n            b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, &quot; &quot;));\n    }\n    return b;\n})(window.location.search.substr(1).split('&amp;'));\n</code></pre>\n<p>With an URL like <code>?topic=123&amp;name=query+string</code>, the following will return:</p>\n<pre><code>qs[&quot;topic&quot;];    // 123\nqs[&quot;name&quot;];     // query string\nqs[&quot;nothere&quot;];  // undefined (object)\n</code></pre>\n<hr />\n<h2>Google method</h2>\n<p>Tearing Google's code I found the method they use: <code>getUrlParameters</code></p>\n<pre><code>function (b) {\n    var c = typeof b === &quot;undefined&quot;;\n    if (a !== h &amp;&amp; c) return a;\n    for (var d = {}, b = b || k[B][vb], e = b[p](&quot;?&quot;), f = b[p](&quot;#&quot;), b = (f === -1 ? b[Ya](e + 1) : [b[Ya](e + 1, f - e - 1), &quot;&amp;&quot;, b[Ya](f + 1)][K](&quot;&quot;))[z](&quot;&amp;&quot;), e = i.dd ? ia : unescape, f = 0, g = b[w]; f &lt; g; ++f) {\n        var l = b[f][p](&quot;=&quot;);\n        if (l !== -1) {\n            var q = b[f][I](0, l),\n                l = b[f][I](l + 1),\n                l = l[Ca](/\\+/g, &quot; &quot;);\n            try {\n                d[q] = e(l)\n            } catch (A) {}\n        }\n    }\n    c &amp;&amp; (a = d);\n    return d\n}\n</code></pre>\n<p>It is obfuscated, but it is understandable. It does not work because some variables are undefined.</p>\n<p>They start to look for parameters on the url from <code>?</code> and also from the hash <code>#</code>. Then for each parameter they split in the equal sign <code>b[f][p](&quot;=&quot;)</code> (which looks like <code>indexOf</code>, they use the position of the char to get the key/value). Having it split they check whether the parameter has a value or not, if it has then they store the value of <code>d</code>, otherwise they just continue.</p>\n<p>In the end the object <code>d</code> is returned, handling escaping and the <code>+</code> sign. This object is just like mine, it has the same behavior.</p>\n<hr />\n<p>My method as a <strong>jQuery plugin</strong></p>\n<pre><code>(function($) {\n    $.QueryString = (function(paramsArray) {\n        let params = {};\n\n        for (let i = 0; i &lt; paramsArray.length; ++i)\n        {\n            let param = paramsArray[i]\n                .split('=', 2);\n            \n            if (param.length !== 2)\n                continue;\n            \n            params[param[0]] = decodeURIComponent(param[1].replace(/\\+/g, &quot; &quot;));\n        }\n            \n        return params;\n    })(window.location.search.substr(1).split('&amp;'))\n})(jQuery);\n</code></pre>\n<p>Usage</p>\n<pre><code>//Get a param\n$.QueryString.param\n//-or-\n$.QueryString[&quot;param&quot;]\n//This outputs something like...\n//&quot;val&quot;\n\n//Get all params as object\n$.QueryString\n//This outputs something like...\n//Object { param: &quot;val&quot;, param2: &quot;val&quot; }\n\n//Set a param (only in the $.QueryString object, doesn't affect the browser's querystring)\n$.QueryString.param = &quot;newvalue&quot;\n//This doesn't output anything, it just updates the $.QueryString object\n\n//Convert object into string suitable for url a querystring (Requires jQuery)\n$.param($.QueryString)\n//This outputs something like...\n//&quot;param=newvalue&amp;param2=val&quot;\n\n//Update the url/querystring in the browser's location bar with the $.QueryString object\nhistory.replaceState({}, '', &quot;?&quot; + $.param($.QueryString));\n//-or-\nhistory.pushState({}, '', &quot;?&quot; + $.param($.QueryString));\n</code></pre>\n<hr />\n<h2><a href=\"http://jsperf.com/querystring-with-javascript\" rel=\"noreferrer\">Performance test (split method against regex method)</a> (<a href=\"http://jsperf.com/\" rel=\"noreferrer\">jsPerf</a>)</h2>\n<p>Preparation code: methods declaration</p>\n<h3>Split test code</h3>\n<pre><code>var qs = window.GetQueryString(query);\n\nvar search = qs[&quot;q&quot;];\nvar value = qs[&quot;value&quot;];\nvar undef = qs[&quot;undefinedstring&quot;];\n</code></pre>\n<h3>Regex test code</h3>\n<pre><code>var search = window.getParameterByName(&quot;q&quot;);\nvar value = window.getParameterByName(&quot;value&quot;);\nvar undef = window.getParameterByName(&quot;undefinedstring&quot;);\n</code></pre>\n<p><strong>Testing in Firefox 4.0 x86 on Windows Server 2008 R2 / 7 x64</strong></p>\n<ul>\n<li><strong>Split method</strong>: 144,780 ±2.17% fastest</li>\n<li><strong>Regex method</strong>: 13,891 ±0.85% | 90% slower</li>\n</ul>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 145918,
          "reputation": 5108,
          "user_id": 356042,
          "user_type": "registered",
          "accept_rate": 79,
          "profile_image": "https://www.gravatar.com/avatar/6f8d77c1048e57833e03707c19420ffd?s=128&d=identicon&r=PG",
          "display_name": "Martin Borthiry",
          "link": "https://stackoverflow.com/users/356042/martin-borthiry"
        },
        "up_vote_count": 103,
        "is_accepted": false,
        "community_owned_date": 1346706521,
        "score": 102,
        "last_activity_date": 1508990311,
        "last_edit_date": 1508990311,
        "creation_date": 1346706521,
        "answer_id": 12254019,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Just use two **splits**:\r\n\r\n    function get(n) {\r\n        var half = location.search.split(n + &#39;=&#39;)[1];\r\n        return half !== undefined ? decodeURIComponent(half.split(&#39;&amp;&#39;)[0]) : null;\r\n    }\r\n\r\nI was reading all the previous and more complete answers. But I think that is the simplest and faster method. You can check in this jsPerf [benchmark][1]\r\n\r\nTo solve the problem in Rup&#39;s comment, add a conditional split by changing the first line to the two below. But absolute accuracy means it&#39;s now slower than regexp (see [jsPerf][2]).\r\n\r\n    function get(n) {\r\n        var half = location.search.split(&#39;&amp;&#39; + n + &#39;=&#39;)[1];\r\n        if (!half) half = location.search.split(&#39;?&#39; + n + &#39;=&#39;)[1];\r\n        return half !== undefined ? decodeURIComponent(half.split(&#39;&amp;&#39;)[0]) : null;\r\n    }\r\n\r\nSo if you know you won&#39;t run into Rup&#39;s counter-case, this wins. Otherwise, regexp.\r\n\r\n&gt; *Or* if you have control of the querystring and can guarantee that a value you are trying to get will never contain any URL encoded\r\n&gt; characters (having these in a value would be a bad idea) - you can use\r\n&gt; the following slightly more simplified and readable version of the 1st option:\r\n&gt; \r\n&gt;         function getQueryStringValueByName(name) {\r\n&gt;             var queryStringFromStartOfValue = location.search.split(name + &#39;=&#39;)[1];\r\n&gt;              return queryStringFromStartOfValue !== undefined ? queryStringFromStartOfValue.split(&#39;&amp;&#39;)[0] : null;\r\n\r\n  [1]: http://jsperf.com/querystring-with-javascript/9\r\n  [2]: http://jsperf.com/querystring-with-javascript/10\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Just use two <strong>splits</strong>:</p>\n\n<pre><code>function get(n) {\n    var half = location.search.split(n + '=')[1];\n    return half !== undefined ? decodeURIComponent(half.split('&amp;')[0]) : null;\n}\n</code></pre>\n\n<p>I was reading all the previous and more complete answers. But I think that is the simplest and faster method. You can check in this jsPerf <a href=\"http://jsperf.com/querystring-with-javascript/9\" rel=\"noreferrer\">benchmark</a></p>\n\n<p>To solve the problem in Rup's comment, add a conditional split by changing the first line to the two below. But absolute accuracy means it's now slower than regexp (see <a href=\"http://jsperf.com/querystring-with-javascript/10\" rel=\"noreferrer\">jsPerf</a>).</p>\n\n<pre><code>function get(n) {\n    var half = location.search.split('&amp;' + n + '=')[1];\n    if (!half) half = location.search.split('?' + n + '=')[1];\n    return half !== undefined ? decodeURIComponent(half.split('&amp;')[0]) : null;\n}\n</code></pre>\n\n<p>So if you know you won't run into Rup's counter-case, this wins. Otherwise, regexp.</p>\n\n<blockquote>\n  <p><em>Or</em> if you have control of the querystring and can guarantee that a value you are trying to get will never contain any URL encoded\n  characters (having these in a value would be a bad idea) - you can use\n  the following slightly more simplified and readable version of the 1st option:</p>\n\n<pre><code>    function getQueryStringValueByName(name) {\n        var queryStringFromStartOfValue = location.search.split(name + '=')[1];\n         return queryStringFromStartOfValue !== undefined ? queryStringFromStartOfValue.split('&amp;')[0] : null;\n</code></pre>\n</blockquote>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 84282,
          "reputation": 2560,
          "user_id": 235704,
          "user_type": "registered",
          "accept_rate": 64,
          "profile_image": "https://www.gravatar.com/avatar/23dfab82d91f68c1cc49f3b2f757a6b7?s=128&d=identicon&r=PG",
          "display_name": "Campbeln",
          "link": "https://stackoverflow.com/users/235704/campbeln"
        },
        "up_vote_count": 34,
        "is_accepted": false,
        "community_owned_date": 1398916300,
        "score": 34,
        "last_activity_date": 1501162665,
        "last_edit_date": 1501162665,
        "creation_date": 1398916300,
        "answer_id": 23401756,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Here&#39;s an extended version of Andy E&#39;s linked &quot;Handle array-style query strings&quot;-version. Fixed a bug (`?key=1&amp;key[]=2&amp;key[]=3`; `1` is lost and replaced with `[2,3]`), made a few minor performance improvements (re-decoding of values, recalculating &quot;[&quot; position, etc.) and added a number of improvements (functionalized, support for `?key=1&amp;key=2`, support for `;` delimiters). I left the variables annoyingly short, but added comments galore to make them readable (oh, and I reused `v` within the local functions, sorry if that is confusing ;).\r\n\r\nIt will handle the following querystring...\r\n\r\n&gt; ?test=Hello&amp;person=neek&amp;person[]=jeff&amp;person[]=jim&amp;person[extra]=john&amp;test3&amp;nocache=1398914891264\r\n\r\n...making it into an object that looks like...\r\n\r\n    {\r\n        &quot;test&quot;: &quot;Hello&quot;,\r\n        &quot;person&quot;: {\r\n            &quot;0&quot;: &quot;neek&quot;,\r\n            &quot;1&quot;: &quot;jeff&quot;,\r\n            &quot;2&quot;: &quot;jim&quot;,\r\n            &quot;length&quot;: 3,\r\n            &quot;extra&quot;: &quot;john&quot;\r\n        },\r\n        &quot;test3&quot;: &quot;&quot;,\r\n        &quot;nocache&quot;: &quot;1398914891264&quot;\r\n    }\r\n\r\nAs you can see above, this version handles some measure of &quot;malformed&quot; arrays, i.e. - `person=neek&amp;person[]=jeff&amp;person[]=jim` or `person=neek&amp;person=jeff&amp;person=jim` as the key is identifiable and valid (at least in dotNet&#39;s [NameValueCollection.Add][1]):\r\n\r\n&gt; If the specified key already exists in the target NameValueCollection\r\n&gt; instance, the specified value is added to the existing comma-separated\r\n&gt; list of values in the form &quot;value1,value2,value3&quot;.\r\n\r\nIt seems [the jury is somewhat out][2] on repeated keys as there is no spec. In this case, multiple keys are stored as an (fake)array. But do note that I **do not** process values based on commas into arrays.\r\n\r\n**The code:**\r\n\r\n    getQueryStringKey = function(key) {\r\n        return getQueryStringAsObject()[key];\r\n    };\r\n\r\n\r\n    getQueryStringAsObject = function() {\r\n        var b, cv, e, k, ma, sk, v, r = {},\r\n            d = function (v) { return decodeURIComponent(v).replace(/\\+/g, &quot; &quot;); }, //# d(ecode) the v(alue)\r\n            q = window.location.search.substring(1), //# suggested: q = decodeURIComponent(window.location.search.substring(1)),\r\n            s = /([^&amp;;=]+)=?([^&amp;;]*)/g //# original regex that does not allow for ; as a delimiter:   /([^&amp;=]+)=?([^&amp;]*)/g\r\n        ;\r\n    \r\n        //# ma(make array) out of the v(alue)\r\n        ma = function(v) {\r\n            //# If the passed v(alue) hasn&#39;t been setup as an object\r\n            if (typeof v != &quot;object&quot;) {\r\n                //# Grab the cv(current value) then setup the v(alue) as an object\r\n                cv = v;\r\n                v = {};\r\n                v.length = 0;\r\n    \r\n                //# If there was a cv(current value), .push it into the new v(alue)&#39;s array\r\n                //#     NOTE: This may or may not be 100% logical to do... but it&#39;s better than loosing the original value\r\n                if (cv) { Array.prototype.push.call(v, cv); }\r\n            }\r\n            return v;\r\n        };\r\n    \r\n        //# While we still have key-value e(ntries) from the q(uerystring) via the s(earch regex)...\r\n        while (e = s.exec(q)) { //# while((e = s.exec(q)) !== null) {\r\n            //# Collect the open b(racket) location (if any) then set the d(ecoded) v(alue) from the above split key-value e(ntry) \r\n            b = e[1].indexOf(&quot;[&quot;);\r\n            v = d(e[2]);\r\n    \r\n            //# As long as this is NOT a hash[]-style key-value e(ntry)\r\n            if (b &lt; 0) { //# b == &quot;-1&quot;\r\n                //# d(ecode) the simple k(ey)\r\n                k = d(e[1]);\r\n    \r\n                //# If the k(ey) already exists\r\n                if (r[k]) {\r\n                    //# ma(make array) out of the k(ey) then .push the v(alue) into the k(ey)&#39;s array in the r(eturn value)\r\n                    r[k] = ma(r[k]);\r\n                    Array.prototype.push.call(r[k], v);\r\n                }\r\n                //# Else this is a new k(ey), so just add the k(ey)/v(alue) into the r(eturn value)\r\n                else {\r\n                    r[k] = v;\r\n                }\r\n            }\r\n            //# Else we&#39;ve got ourselves a hash[]-style key-value e(ntry) \r\n            else {\r\n                //# Collect the d(ecoded) k(ey) and the d(ecoded) sk(sub-key) based on the b(racket) locations\r\n                k = d(e[1].slice(0, b));\r\n                sk = d(e[1].slice(b + 1, e[1].indexOf(&quot;]&quot;, b)));\r\n    \r\n                //# ma(make array) out of the k(ey) \r\n                r[k] = ma(r[k]);\r\n                        \r\n                //# If we have a sk(sub-key), plug the v(alue) into it\r\n                if (sk) { r[k][sk] = v; }\r\n                //# Else .push the v(alue) into the k(ey)&#39;s array\r\n                else { Array.prototype.push.call(r[k], v); }\r\n            }\r\n        }\r\n    \r\n        //# Return the r(eturn value)\r\n        return r;\r\n    };\r\n\r\n\r\n  [1]: http://msdn.microsoft.com/en-us/library/xsc9a449.aspx\r\n  [2]: https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Here's an extended version of Andy E's linked \"Handle array-style query strings\"-version. Fixed a bug (<code>?key=1&amp;key[]=2&amp;key[]=3</code>; <code>1</code> is lost and replaced with <code>[2,3]</code>), made a few minor performance improvements (re-decoding of values, recalculating \"[\" position, etc.) and added a number of improvements (functionalized, support for <code>?key=1&amp;key=2</code>, support for <code>;</code> delimiters). I left the variables annoyingly short, but added comments galore to make them readable (oh, and I reused <code>v</code> within the local functions, sorry if that is confusing ;).</p>\n\n<p>It will handle the following querystring...</p>\n\n<blockquote>\n  <p>?test=Hello&amp;person=neek&amp;person[]=jeff&amp;person[]=jim&amp;person[extra]=john&amp;test3&amp;nocache=1398914891264</p>\n</blockquote>\n\n<p>...making it into an object that looks like...</p>\n\n<pre><code>{\n    \"test\": \"Hello\",\n    \"person\": {\n        \"0\": \"neek\",\n        \"1\": \"jeff\",\n        \"2\": \"jim\",\n        \"length\": 3,\n        \"extra\": \"john\"\n    },\n    \"test3\": \"\",\n    \"nocache\": \"1398914891264\"\n}\n</code></pre>\n\n<p>As you can see above, this version handles some measure of \"malformed\" arrays, i.e. - <code>person=neek&amp;person[]=jeff&amp;person[]=jim</code> or <code>person=neek&amp;person=jeff&amp;person=jim</code> as the key is identifiable and valid (at least in dotNet's <a href=\"http://msdn.microsoft.com/en-us/library/xsc9a449.aspx\" rel=\"noreferrer\">NameValueCollection.Add</a>):</p>\n\n<blockquote>\n  <p>If the specified key already exists in the target NameValueCollection\n  instance, the specified value is added to the existing comma-separated\n  list of values in the form \"value1,value2,value3\".</p>\n</blockquote>\n\n<p>It seems <a href=\"https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys\">the jury is somewhat out</a> on repeated keys as there is no spec. In this case, multiple keys are stored as an (fake)array. But do note that I <strong>do not</strong> process values based on commas into arrays.</p>\n\n<p><strong>The code:</strong></p>\n\n<pre><code>getQueryStringKey = function(key) {\n    return getQueryStringAsObject()[key];\n};\n\n\ngetQueryStringAsObject = function() {\n    var b, cv, e, k, ma, sk, v, r = {},\n        d = function (v) { return decodeURIComponent(v).replace(/\\+/g, \" \"); }, //# d(ecode) the v(alue)\n        q = window.location.search.substring(1), //# suggested: q = decodeURIComponent(window.location.search.substring(1)),\n        s = /([^&amp;;=]+)=?([^&amp;;]*)/g //# original regex that does not allow for ; as a delimiter:   /([^&amp;=]+)=?([^&amp;]*)/g\n    ;\n\n    //# ma(make array) out of the v(alue)\n    ma = function(v) {\n        //# If the passed v(alue) hasn't been setup as an object\n        if (typeof v != \"object\") {\n            //# Grab the cv(current value) then setup the v(alue) as an object\n            cv = v;\n            v = {};\n            v.length = 0;\n\n            //# If there was a cv(current value), .push it into the new v(alue)'s array\n            //#     NOTE: This may or may not be 100% logical to do... but it's better than loosing the original value\n            if (cv) { Array.prototype.push.call(v, cv); }\n        }\n        return v;\n    };\n\n    //# While we still have key-value e(ntries) from the q(uerystring) via the s(earch regex)...\n    while (e = s.exec(q)) { //# while((e = s.exec(q)) !== null) {\n        //# Collect the open b(racket) location (if any) then set the d(ecoded) v(alue) from the above split key-value e(ntry) \n        b = e[1].indexOf(\"[\");\n        v = d(e[2]);\n\n        //# As long as this is NOT a hash[]-style key-value e(ntry)\n        if (b &lt; 0) { //# b == \"-1\"\n            //# d(ecode) the simple k(ey)\n            k = d(e[1]);\n\n            //# If the k(ey) already exists\n            if (r[k]) {\n                //# ma(make array) out of the k(ey) then .push the v(alue) into the k(ey)'s array in the r(eturn value)\n                r[k] = ma(r[k]);\n                Array.prototype.push.call(r[k], v);\n            }\n            //# Else this is a new k(ey), so just add the k(ey)/v(alue) into the r(eturn value)\n            else {\n                r[k] = v;\n            }\n        }\n        //# Else we've got ourselves a hash[]-style key-value e(ntry) \n        else {\n            //# Collect the d(ecoded) k(ey) and the d(ecoded) sk(sub-key) based on the b(racket) locations\n            k = d(e[1].slice(0, b));\n            sk = d(e[1].slice(b + 1, e[1].indexOf(\"]\", b)));\n\n            //# ma(make array) out of the k(ey) \n            r[k] = ma(r[k]);\n\n            //# If we have a sk(sub-key), plug the v(alue) into it\n            if (sk) { r[k][sk] = v; }\n            //# Else .push the v(alue) into the k(ey)'s array\n            else { Array.prototype.push.call(r[k], v); }\n        }\n    }\n\n    //# Return the r(eturn value)\n    return r;\n};\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 942854,
          "reputation": 20798,
          "user_id": 985454,
          "user_type": "registered",
          "accept_rate": 84,
          "profile_image": "https://www.gravatar.com/avatar/240c85cfce79d99a6393196f484484a6?s=128&d=identicon&r=PG",
          "display_name": "Qwerty",
          "link": "https://stackoverflow.com/users/985454/qwerty"
        },
        "up_vote_count": 251,
        "is_accepted": false,
        "community_owned_date": 1389842435,
        "score": 250,
        "last_activity_date": 1499848172,
        "last_edit_date": 1499848172,
        "creation_date": 1389842435,
        "answer_id": 21152762,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "# *tl;dr*\r\n\r\nA quick, **complete solution**, which handles **multivalued keys** and **encoded characters**.\r\n\r\n    var qd = {};\r\n    if (location.search) location.search.substr(1).split(&quot;&amp;&quot;).forEach(function(item) {var s = item.split(&quot;=&quot;), k = s[0], v = s[1] &amp;&amp; decodeURIComponent(s[1]); (qd[k] = qd[k] || []).push(v)})\r\n\r\n    //using ES6   (23 characters cooler)\r\n    var qd = {};\r\n    if (location.search) location.search.substr(1).split`&amp;`.forEach(item =&gt; {let [k,v] = item.split`=`; v = v &amp;&amp; decodeURIComponent(v); (qd[k] = qd[k] || []).push(v)})\r\n\r\n\r\n####Multi-lined:\r\n\r\n    var qd = {};\r\n    if (location.search) location.search.substr(1).split(&quot;&amp;&quot;).forEach(function(item) {\r\n        var s = item.split(&quot;=&quot;),\r\n            k = s[0],\r\n            v = s[1] &amp;&amp; decodeURIComponent(s[1]); //  null-coalescing / short-circuit\r\n        //(k in qd) ? qd[k].push(v) : qd[k] = [v]\r\n        (qd[k] = qd[k] || []).push(v) // null-coalescing / short-circuit\r\n    })\r\n\r\nWhat is all this code...  \r\n*[&quot;null-coalescing&quot;][1], [short-circuit evaluation][2]  \r\nES6 [Destructuring assignments][3], [Arrow functions][4], [Template strings][6]*\r\n####Example:\r\n\r\n    &quot;?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst&#229;le%26car%3Dsaab&quot;\r\n    &gt; qd\r\n    a: [&quot;1&quot;, &quot;5&quot;, &quot;t e x t&quot;]\r\n    b: [&quot;0&quot;]\r\n    c: [&quot;3&quot;]\r\n    d: [undefined]\r\n    e: [undefined, &quot;http://w3schools.com/my test.asp?name=st&#229;le&amp;car=saab&quot;]\r\n\r\n    &gt; qd.a[1]    // &quot;5&quot;\r\n    &gt; qd[&quot;a&quot;][1] // &quot;5&quot;\r\n\r\n&lt;br&gt;\r\n&lt;hr&gt;\r\n\r\n# Read more... about the Vanilla JavaScript solution.\r\n_To access different parts of a URL use `location.(search|hash)`_\r\n\r\n## Easiest (dummy) solution\r\n\r\n    var queryDict = {};\r\n    location.search.substr(1).split(&quot;&amp;&quot;).forEach(function(item) {queryDict[item.split(&quot;=&quot;)[0]] = item.split(&quot;=&quot;)[1]})\r\n\r\n&lt;ul&gt;\r\n&lt;li&gt;Handles &lt;b&gt;empty keys&lt;/b&gt; correctly.&lt;/li&gt;\r\n&lt;li&gt;Overrides &lt;b&gt;multi-keys&lt;/b&gt; with &lt;b&gt;last&lt;/b&gt; value found.&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n    &quot;?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&quot;\r\n    &gt; queryDict\r\n    a: &quot;5&quot;\r\n    b: &quot;0&quot;\r\n    c: &quot;3&quot;\r\n    d: undefined\r\n    e: undefined\r\n\r\n## Multi-valued keys\r\n\r\nSimple key check `(item in dict) ? dict.item.push(val) : dict.item = [val]`\r\n\r\n    var qd = {};\r\n    location.search.substr(1).split(&quot;&amp;&quot;).forEach(function(item) {(item.split(&quot;=&quot;)[0] in qd) ? qd[item.split(&quot;=&quot;)[0]].push(item.split(&quot;=&quot;)[1]) : qd[item.split(&quot;=&quot;)[0]] = [item.split(&quot;=&quot;)[1]]})\r\n&lt;ul&gt;\r\n&lt;li&gt;Now returns &lt;b&gt;arrays&lt;/b&gt; instead.&lt;/li&gt;\r\n&lt;li&gt;Access values by &lt;code&gt;qd.key[index]&lt;/code&gt; or &lt;code&gt;qd[key][index]&lt;/code&gt;&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n    &gt; qd\r\n    a: [&quot;1&quot;, &quot;5&quot;]\r\n    b: [&quot;0&quot;]\r\n    c: [&quot;3&quot;]\r\n    d: [undefined]\r\n    e: [undefined]\r\n\r\n## Encoded characters?\r\nUse `decodeURIComponent()` for the second *or both* splits.\r\n\r\n    var qd = {};\r\n    location.search.substr(1).split(&quot;&amp;&quot;).forEach(function(item) {var k = item.split(&quot;=&quot;)[0], v = decodeURIComponent(item.split(&quot;=&quot;)[1]); (k in qd) ? qd[k].push(v) : qd[k] = [v]})\r\n\r\n####Example:\r\n\r\n    &quot;?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst&#229;le%26car%3Dsaab&quot;\r\n    &gt; qd\r\n    a: [&quot;1&quot;, &quot;5&quot;, &quot;t e x t&quot;]\r\n    b: [&quot;0&quot;]\r\n    c: [&quot;3&quot;]\r\n    d: [&quot;undefined&quot;]  // decodeURIComponent(undefined) returns &quot;undefined&quot; !!!*\r\n    e: [&quot;undefined&quot;, &quot;http://w3schools.com/my test.asp?name=st&#229;le&amp;car=saab&quot;]\r\n&lt;br&gt;\r\n&lt;hr&gt;\r\n# From comments\r\n**\\*!!!** Please note, that `decodeURIComponent(undefined)` returns string `&quot;undefined&quot;`. The solution lies in a simple usage of [`&amp;&amp;`][5], which ensures that `decodeURIComponent()` is not called on undefined values. _(See the &quot;complete solution&quot; at the top.)_\r\n\r\n    v = v &amp;&amp; decodeURIComponent(v);\r\n\r\n&lt;br&gt;\r\nIf the querystring is empty (`location.search == &quot;&quot;`), the result is somewhat misleading `qd == {&quot;&quot;: undefined}`. It is suggested to check the querystring before launching the parsing function likeso:\r\n\r\n    if (location.search) location.search.substr(1).split(&quot;&amp;&quot;).forEach(...)\r\n\r\n\r\n  [1]: https://stackoverflow.com/q/476436/985454\r\n  [2]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Short-Circuit_Evaluation\r\n  [3]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\r\n  [4]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\r\n  [5]: https://stackoverflow.com/a/476445/985454\r\n  [6]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals",
        "title": "How can I get query string values in JavaScript?",
        "body": "<h1><em>tl;dr</em></h1>\n\n<p>A quick, <strong>complete solution</strong>, which handles <strong>multivalued keys</strong> and <strong>encoded characters</strong>.</p>\n\n<pre><code>var qd = {};\nif (location.search) location.search.substr(1).split(\"&amp;\").forEach(function(item) {var s = item.split(\"=\"), k = s[0], v = s[1] &amp;&amp; decodeURIComponent(s[1]); (qd[k] = qd[k] || []).push(v)})\n\n//using ES6   (23 characters cooler)\nvar qd = {};\nif (location.search) location.search.substr(1).split`&amp;`.forEach(item =&gt; {let [k,v] = item.split`=`; v = v &amp;&amp; decodeURIComponent(v); (qd[k] = qd[k] || []).push(v)})\n</code></pre>\n\nMulti-lined:\n\n<pre><code>var qd = {};\nif (location.search) location.search.substr(1).split(\"&amp;\").forEach(function(item) {\n    var s = item.split(\"=\"),\n        k = s[0],\n        v = s[1] &amp;&amp; decodeURIComponent(s[1]); //  null-coalescing / short-circuit\n    //(k in qd) ? qd[k].push(v) : qd[k] = [v]\n    (qd[k] = qd[k] || []).push(v) // null-coalescing / short-circuit\n})\n</code></pre>\n\n<p>What is all this code...<br>\n<em><a href=\"https://stackoverflow.com/q/476436/985454\">\"null-coalescing\"</a>, <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Short-Circuit_Evaluation\" rel=\"noreferrer\">short-circuit evaluation</a><br>\nES6 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" rel=\"noreferrer\">Destructuring assignments</a>, <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"noreferrer\">Arrow functions</a>, <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\" rel=\"noreferrer\">Template strings</a></em></p>\n\nExample:\n\n<pre><code>\"?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dståle%26car%3Dsaab\"\n&gt; qd\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined, \"http://w3schools.com/my test.asp?name=ståle&amp;car=saab\"]\n\n&gt; qd.a[1]    // \"5\"\n&gt; qd[\"a\"][1] // \"5\"\n</code></pre>\n\n<p><br></p>\n\n<hr>\n\n<h1>Read more... about the Vanilla JavaScript solution.</h1>\n\n<p><em>To access different parts of a URL use <code>location.(search|hash)</code></em></p>\n\n<h2>Easiest (dummy) solution</h2>\n\n<pre><code>var queryDict = {};\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]})\n</code></pre>\n\n<ul>\n<li>Handles <b>empty keys</b> correctly.</li>\n<li>Overrides <b>multi-keys</b> with <b>last</b> value found.</li>\n</ul>\n\n<pre><code>\"?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5\"\n&gt; queryDict\na: \"5\"\nb: \"0\"\nc: \"3\"\nd: undefined\ne: undefined\n</code></pre>\n\n<h2>Multi-valued keys</h2>\n\n<p>Simple key check <code>(item in dict) ? dict.item.push(val) : dict.item = [val]</code></p>\n\n<pre><code>var qd = {};\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {(item.split(\"=\")[0] in qd) ? qd[item.split(\"=\")[0]].push(item.split(\"=\")[1]) : qd[item.split(\"=\")[0]] = [item.split(\"=\")[1]]})\n</code></pre>\n\n<ul>\n<li>Now returns <b>arrays</b> instead.</li>\n<li>Access values by <code>qd.key[index]</code> or <code>qd[key][index]</code></li>\n</ul>\n\n<pre><code>&gt; qd\na: [\"1\", \"5\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined]\n</code></pre>\n\n<h2>Encoded characters?</h2>\n\n<p>Use <code>decodeURIComponent()</code> for the second <em>or both</em> splits.</p>\n\n<pre><code>var qd = {};\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {var k = item.split(\"=\")[0], v = decodeURIComponent(item.split(\"=\")[1]); (k in qd) ? qd[k].push(v) : qd[k] = [v]})\n</code></pre>\n\nExample:\n\n<pre><code>\"?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dståle%26car%3Dsaab\"\n&gt; qd\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [\"undefined\"]  // decodeURIComponent(undefined) returns \"undefined\" !!!*\ne: [\"undefined\", \"http://w3schools.com/my test.asp?name=ståle&amp;car=saab\"]\n</code></pre>\n\n<p><br>\n<hr></p>\n\n<h1>From comments</h1>\n\n<p><strong>*!!!</strong> Please note, that <code>decodeURIComponent(undefined)</code> returns string <code>\"undefined\"</code>. The solution lies in a simple usage of <a href=\"https://stackoverflow.com/a/476445/985454\"><code>&amp;&amp;</code></a>, which ensures that <code>decodeURIComponent()</code> is not called on undefined values. <em>(See the \"complete solution\" at the top.)</em></p>\n\n<pre><code>v = v &amp;&amp; decodeURIComponent(v);\n</code></pre>\n\n<p><br>\nIf the querystring is empty (<code>location.search == \"\"</code>), the result is somewhat misleading <code>qd == {\"\": undefined}</code>. It is suggested to check the querystring before launching the parsing function likeso:</p>\n\n<pre><code>if (location.search) location.search.substr(1).split(\"&amp;\").forEach(...)\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 894236,
          "reputation": 1377,
          "user_id": 931868,
          "user_type": "registered",
          "accept_rate": 43,
          "profile_image": "https://www.gravatar.com/avatar/09c2063f87ff4a27c5d81482f89cfb0e?s=128&d=identicon&r=PG",
          "display_name": "Roi",
          "link": "https://stackoverflow.com/users/931868/roi"
        },
        "up_vote_count": 19,
        "is_accepted": false,
        "community_owned_date": 1364518747,
        "score": 18,
        "last_activity_date": 1481751491,
        "last_edit_date": 1481751491,
        "creation_date": 1364518747,
        "answer_id": 15694751,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "A very lightweight jQuery method: \r\n\r\n\tvar qs = window.location.search.replace(&#39;?&#39;,&#39;&#39;).split(&#39;&amp;&#39;),\r\n\t\trequest = {};\r\n\t$.each(qs, function(i,v) {\r\n\t\tvar initial, pair = v.split(&#39;=&#39;);\r\n\t\tif(initial = request[pair[0]]){\r\n\t\t\tif(!$.isArray(initial)) {\r\n\t\t\t\trequest[pair[0]] = [initial]\r\n\t\t\t}\r\n\t\t\trequest[pair[0]].push(pair[1]);\r\n\t\t} else {\r\n\t\t\trequest[pair[0]] = pair[1];\r\n\t\t}\r\n\t\treturn;\r\n\t});\r\n\tconsole.log(request);\r\n\r\nAnd to alert, for example ?q\r\n\r\n\talert(request.q)\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>A very lightweight jQuery method: </p>\n\n<pre><code>var qs = window.location.search.replace('?','').split('&amp;'),\n    request = {};\n$.each(qs, function(i,v) {\n    var initial, pair = v.split('=');\n    if(initial = request[pair[0]]){\n        if(!$.isArray(initial)) {\n            request[pair[0]] = [initial]\n        }\n        request[pair[0]].push(pair[1]);\n    } else {\n        request[pair[0]] = pair[1];\n    }\n    return;\n});\nconsole.log(request);\n</code></pre>\n\n<p>And to alert, for example ?q</p>\n\n<pre><code>alert(request.q)\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 135549,
          "reputation": 4794,
          "user_id": 338477,
          "user_type": "registered",
          "profile_image": "https://www.gravatar.com/avatar/3c53262cdb212077dd9c4320cd0b0e86?s=128&d=identicon&r=PG",
          "display_name": "Vadim",
          "link": "https://stackoverflow.com/users/338477/vadim"
        },
        "up_vote_count": 22,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 18,
        "last_activity_date": 1471240370,
        "last_edit_date": 1471240370,
        "creation_date": 1289901308,
        "answer_id": 4192880,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Here is [my version of query string parsing code on GitHub][1].\r\n\r\nIt&#39;s &quot;prefixed&quot; with jquery.*, but the parsing function itself don&#39;t use jQuery. It&#39;s pretty fast, but still open for few simple performance optimizations.\r\n\r\nAlso it supports list &amp; hash-tables encoding in the URL, like:\r\n\r\n    arr[]=10&amp;arr[]=20&amp;arr[]=100\r\n\r\nor\r\n\r\n    hash[key1]=hello&amp;hash[key2]=moto&amp;a=How%20are%20you\r\n\r\n----\r\n\r\n    jQuery.toQueryParams = function(str, separator) {\r\n\t\tseparator = separator || &#39;&amp;&#39;\r\n\t\tvar obj = {}\r\n\t\tif (str.length == 0)\r\n\t\t\treturn obj\r\n\t\tvar c = str.substr(0,1)\r\n\t\tvar s = c==&#39;?&#39; || c==&#39;#&#39;  ? str.substr(1) : str; \r\n\r\n\t\tvar a = s.split(separator)\r\n\t\tfor (var i=0; i&lt;a.length; i++) {\r\n\t\t\tvar p = a[i].indexOf(&#39;=&#39;)\r\n\t\t\tif (p &lt; 0) {\r\n\t\t\t\tobj[a[i]] = &#39;&#39;\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tvar k = decodeURIComponent(a[i].substr(0,p)),\r\n\t\t\t\tv = decodeURIComponent(a[i].substr(p+1))\r\n\r\n\t\t\tvar bps = k.indexOf(&#39;[&#39;)\r\n\t\t\tif (bps &lt; 0) {\r\n\t\t\t\tobj[k] = v\r\n\t\t\t\tcontinue;\r\n\t\t\t} \r\n\r\n\t\t\tvar bpe = k.substr(bps+1).indexOf(&#39;]&#39;)\r\n\t\t\tif (bpe &lt; 0) {\r\n\t\t\t\tobj[k] = v\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tvar bpv = k.substr(bps+1, bps+bpe-1)\r\n\t\t\tvar k = k.substr(0,bps)\r\n\t\t\tif (bpv.length &lt;= 0) {\r\n\t\t\t\tif (typeof(obj[k]) != &#39;object&#39;) obj[k] = []\r\n\t\t\t\tobj[k].push(v)\r\n\t\t\t} else {\r\n\t\t\t\tif (typeof(obj[k]) != &#39;object&#39;) obj[k] = {}\r\n\t\t\t\tobj[k][bpv] = v\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn obj;\r\n\r\n    }\r\n\r\n\r\n  [1]: https://github.com/voituk/Misc/blob/master/js/jquery.hash.js#L10",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Here is <a href=\"https://github.com/voituk/Misc/blob/master/js/jquery.hash.js#L10\" rel=\"noreferrer\">my version of query string parsing code on GitHub</a>.</p>\n\n<p>It's \"prefixed\" with jquery.*, but the parsing function itself don't use jQuery. It's pretty fast, but still open for few simple performance optimizations.</p>\n\n<p>Also it supports list &amp; hash-tables encoding in the URL, like:</p>\n\n<pre><code>arr[]=10&amp;arr[]=20&amp;arr[]=100\n</code></pre>\n\n<p>or</p>\n\n<pre><code>hash[key1]=hello&amp;hash[key2]=moto&amp;a=How%20are%20you\n</code></pre>\n\n<hr>\n\n<pre><code>jQuery.toQueryParams = function(str, separator) {\n    separator = separator || '&amp;'\n    var obj = {}\n    if (str.length == 0)\n        return obj\n    var c = str.substr(0,1)\n    var s = c=='?' || c=='#'  ? str.substr(1) : str; \n\n    var a = s.split(separator)\n    for (var i=0; i&lt;a.length; i++) {\n        var p = a[i].indexOf('=')\n        if (p &lt; 0) {\n            obj[a[i]] = ''\n            continue\n        }\n        var k = decodeURIComponent(a[i].substr(0,p)),\n            v = decodeURIComponent(a[i].substr(p+1))\n\n        var bps = k.indexOf('[')\n        if (bps &lt; 0) {\n            obj[k] = v\n            continue;\n        } \n\n        var bpe = k.substr(bps+1).indexOf(']')\n        if (bpe &lt; 0) {\n            obj[k] = v\n            continue;\n        }\n\n        var bpv = k.substr(bps+1, bps+bpe-1)\n        var k = k.substr(0,bps)\n        if (bpv.length &lt;= 0) {\n            if (typeof(obj[k]) != 'object') obj[k] = []\n            obj[k].push(v)\n        } else {\n            if (typeof(obj[k]) != 'object') obj[k] = {}\n            obj[k][bpv] = v\n        }\n    }\n    return obj;\n\n}\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "user_type": "does_not_exist",
          "display_name": "user981090"
        },
        "up_vote_count": 8,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 8,
        "last_activity_date": 1471027617,
        "last_edit_date": 1471027617,
        "creation_date": 1325723167,
        "answer_id": 8736060,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Try this:\r\n\r\n    String.prototype.getValueByKey = function(k){\r\n\t\tvar p = new RegExp(&#39;\\\\b&#39;+k+&#39;\\\\b&#39;,&#39;gi&#39;);\r\n\t\treturn this.search(p) != -1 ? decodeURIComponent(this.substr(this.search(p)+k.length+1).substr(0,this.substr(this.search(p)+k.length+1).search(/(&amp;|;|$)/))) : &quot;&quot;;\r\n\t};\r\n\r\nThen call it like so:\r\n\r\n    if(location.search != &quot;&quot;) location.search.getValueByKey(&quot;id&quot;);\r\n\r\nYou can use this for **cookies** also:\r\n\r\n    if(navigator.cookieEnabled) document.cookie.getValueByKey(&quot;username&quot;);\r\n\r\nThis only works for strings that have `key=value[&amp;|;|$]`... will not work on objects/arrays.\r\n\r\nIf you **don&#39;t** want to use **String.prototype**...\r\nmove it to a function and pass the string as an argument",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Try this:</p>\n\n<pre><code>String.prototype.getValueByKey = function(k){\n    var p = new RegExp('\\\\b'+k+'\\\\b','gi');\n    return this.search(p) != -1 ? decodeURIComponent(this.substr(this.search(p)+k.length+1).substr(0,this.substr(this.search(p)+k.length+1).search(/(&amp;|;|$)/))) : \"\";\n};\n</code></pre>\n\n<p>Then call it like so:</p>\n\n<pre><code>if(location.search != \"\") location.search.getValueByKey(\"id\");\n</code></pre>\n\n<p>You can use this for <strong>cookies</strong> also:</p>\n\n<pre><code>if(navigator.cookieEnabled) document.cookie.getValueByKey(\"username\");\n</code></pre>\n\n<p>This only works for strings that have <code>key=value[&amp;|;|$]</code>... will not work on objects/arrays.</p>\n\n<p>If you <strong>don't</strong> want to use <strong>String.prototype</strong>...\nmove it to a function and pass the string as an argument</p>\n"
      },
      {
        "tags": [],
        "owner": {
          "user_type": "does_not_exist",
          "display_name": "user2579312"
        },
        "up_vote_count": 8,
        "is_accepted": false,
        "community_owned_date": 1378543037,
        "score": 7,
        "last_activity_date": 1471027584,
        "last_edit_date": 1471027584,
        "creation_date": 1378543037,
        "answer_id": 18671460,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I used this code (JavaScript) to get the what is passed through the URL:\r\n\r\n    function getUrlVars() {\r\n\t\t\t\tvar vars = {};\r\n\t\t\t\tvar parts = window.location.href.replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value) {\r\n\t\t\t\t\tvars[key] = value;\r\n\t\t\t\t});\r\n\t\t\t\treturn vars;\r\n\t\t\t}\r\n\r\nThen to assign the value to a variable, you only have to specify which parameter you want to get, ie if the URL is `example.com/?I=1&amp;p=2&amp;f=3`\r\n\r\nYou can do this to get the values:\r\n\r\n    var getI = getUrlVars()[&quot;I&quot;];\r\n    var getP = getUrlVars()[&quot;p&quot;];\r\n    var getF = getUrlVars()[&quot;f&quot;];\r\n\r\nthen the values would be:\r\n\r\n    getI = 1, getP = 2 and getF = 3\r\n\r\n\r\n\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>I used this code (JavaScript) to get the what is passed through the URL:</p>\n\n<pre><code>function getUrlVars() {\n            var vars = {};\n            var parts = window.location.href.replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value) {\n                vars[key] = value;\n            });\n            return vars;\n        }\n</code></pre>\n\n<p>Then to assign the value to a variable, you only have to specify which parameter you want to get, ie if the URL is <code>example.com/?I=1&amp;p=2&amp;f=3</code></p>\n\n<p>You can do this to get the values:</p>\n\n<pre><code>var getI = getUrlVars()[\"I\"];\nvar getP = getUrlVars()[\"p\"];\nvar getF = getUrlVars()[\"f\"];\n</code></pre>\n\n<p>then the values would be:</p>\n\n<pre><code>getI = 1, getP = 2 and getF = 3\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 209737,
          "reputation": 22151,
          "user_id": 460942,
          "user_type": "registered",
          "accept_rate": 84,
          "profile_image": "https://www.gravatar.com/avatar/6faba49dfe8649fc2b4073f3bbc3428f?s=128&d=identicon&r=PG",
          "display_name": "Anoop",
          "link": "https://stackoverflow.com/users/460942/anoop"
        },
        "up_vote_count": 9,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 8,
        "last_activity_date": 1471027562,
        "last_edit_date": 1471027562,
        "creation_date": 1318790282,
        "answer_id": 7786438,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The following code will create an object which has two methods:\r\n\r\n1. `isKeyExist`: Check if a particular parameter exist\r\n2. `getValue`: Get the value of a particular parameter.\r\n\r\n&amp;nbsp;\r\n\r\n    var QSParam = new function() {\r\n           var qsParm = {};\r\n           var query = window.location.search.substring(1);\r\n           var params = query.split(&#39;&amp;&#39;);\r\n           for (var i = 0; i &lt; params.length; i++) {\r\n               var pos = params[i].indexOf(&#39;=&#39;);\r\n               if (pos &gt; 0) {\r\n                   var key = params[i].substring(0, pos);\r\n                   var val = params[i].substring(pos + 1);\r\n                   qsParm[key] = val;\r\n               }\r\n           }\r\n           this.isKeyExist = function(query){\r\n               if(qsParm[query]){\r\n                   return true;\r\n               }\r\n               else{\r\n                  return false;\r\n               }\r\n           };\r\n           this.getValue = function(query){\r\n               if(qsParm[query])\r\n               {\r\n                   return qsParm[query];\r\n               }\r\n               throw &quot;URL does not contain query &quot;+ query;\r\n           }\r\n    };\r\n\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>The following code will create an object which has two methods:</p>\n\n<ol>\n<li><code>isKeyExist</code>: Check if a particular parameter exist</li>\n<li><code>getValue</code>: Get the value of a particular parameter.</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<pre><code>var QSParam = new function() {\n       var qsParm = {};\n       var query = window.location.search.substring(1);\n       var params = query.split('&amp;');\n       for (var i = 0; i &lt; params.length; i++) {\n           var pos = params[i].indexOf('=');\n           if (pos &gt; 0) {\n               var key = params[i].substring(0, pos);\n               var val = params[i].substring(pos + 1);\n               qsParm[key] = val;\n           }\n       }\n       this.isKeyExist = function(query){\n           if(qsParm[query]){\n               return true;\n           }\n           else{\n              return false;\n           }\n       };\n       this.getValue = function(query){\n           if(qsParm[query])\n           {\n               return qsParm[query];\n           }\n           throw \"URL does not contain query \"+ query;\n       }\n};\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 1958807,
          "reputation": 789,
          "user_id": 1761066,
          "user_type": "registered",
          "accept_rate": 60,
          "profile_image": "https://i.stack.imgur.com/KpHhS.png?s=128&g=1",
          "display_name": "Ankit_Shah55",
          "link": "https://stackoverflow.com/users/1761066/ankit-shah55"
        },
        "up_vote_count": 4,
        "is_accepted": false,
        "community_owned_date": 1379093361,
        "score": 4,
        "last_activity_date": 1471027549,
        "last_edit_date": 1471027549,
        "creation_date": 1379093361,
        "answer_id": 18792024,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This is very simple method to get parameter value(query string)\r\n\r\nUse `gV(para_name)` function to retrieve its value\r\n\r\n    var a=window.location.search;\r\n    a=a.replace(a.charAt(0),&quot;&quot;); //Removes &#39;?&#39;\r\n    a=a.split(&quot;&amp;&quot;);\r\n\r\n    function gV(x){\r\n     for(i=0;i&lt;a.length;i++){\r\n      var b=a[i].substr(0,a[i].indexOf(&quot;=&quot;));\r\n      if(x==b){\r\n       return a[i].substr(a[i].indexOf(&quot;=&quot;)+1,a[i].length)}",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>This is very simple method to get parameter value(query string)</p>\n\n<p>Use <code>gV(para_name)</code> function to retrieve its value</p>\n\n<pre><code>var a=window.location.search;\na=a.replace(a.charAt(0),\"\"); //Removes '?'\na=a.split(\"&amp;\");\n\nfunction gV(x){\n for(i=0;i&lt;a.length;i++){\n  var b=a[i].substr(0,a[i].indexOf(\"=\"));\n  if(x==b){\n   return a[i].substr(a[i].indexOf(\"=\")+1,a[i].length)}\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 1471497,
          "reputation": 673,
          "user_id": 1382955,
          "user_type": "registered",
          "profile_image": "https://i.stack.imgur.com/NRHHp.jpg?s=128&g=1",
          "display_name": "Robert Bolton",
          "link": "https://stackoverflow.com/users/1382955/robert-bolton"
        },
        "up_vote_count": 4,
        "is_accepted": false,
        "community_owned_date": 1368756855,
        "score": 4,
        "last_activity_date": 1471027538,
        "last_edit_date": 1471027538,
        "creation_date": 1368756855,
        "answer_id": 16600410,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you do not wish to use a JavaScript library you can use the JavaScript string functions to parse `window.location`. Keep this code in an external .js file and you can use it over and over again in different projects.\r\n\r\n    // Example - window.location = &quot;index.htm?name=bob&quot;;\r\n\r\n    var value = getParameterValue(&quot;name&quot;);\r\n\r\n    alert(&quot;name = &quot; + value);\r\n\r\n    function getParameterValue(param)\r\n    {\r\n        var url = window.location;\r\n        var parts = url.split(&#39;?&#39;);\r\n        var params = parts[1].split(&#39;&amp;&#39;);\r\n        var val = &quot;&quot;;\r\n\r\n        for ( var i=0; i&lt;params.length; i++)\r\n        {\r\n            var paramNameVal = params[i].split(&#39;=&#39;);\r\n\r\n            if ( paramNameVal[0] == param )\r\n            {\r\n                val = paramNameVal[1];\r\n            }\r\n        }\r\n        return val;\r\n    }\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>If you do not wish to use a JavaScript library you can use the JavaScript string functions to parse <code>window.location</code>. Keep this code in an external .js file and you can use it over and over again in different projects.</p>\n\n<pre><code>// Example - window.location = \"index.htm?name=bob\";\n\nvar value = getParameterValue(\"name\");\n\nalert(\"name = \" + value);\n\nfunction getParameterValue(param)\n{\n    var url = window.location;\n    var parts = url.split('?');\n    var params = parts[1].split('&amp;');\n    var val = \"\";\n\n    for ( var i=0; i&lt;params.length; i++)\n    {\n        var paramNameVal = params[i].split('=');\n\n        if ( paramNameVal[0] == param )\n        {\n            val = paramNameVal[1];\n        }\n    }\n    return val;\n}\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 2330950,
          "reputation": 383,
          "user_id": 2044399,
          "user_type": "registered",
          "profile_image": "https://www.gravatar.com/avatar/e316741591b6af596f9a518dec03b4e5?s=128&d=identicon&r=PG",
          "display_name": "farnoush resa",
          "link": "https://stackoverflow.com/users/2044399/farnoush-resa"
        },
        "up_vote_count": 3,
        "is_accepted": false,
        "community_owned_date": 1373704709,
        "score": 3,
        "last_activity_date": 1471027520,
        "last_edit_date": 1471027520,
        "creation_date": 1373704709,
        "answer_id": 17628458,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I recommend [Dar Lessons][1] as a good plugin. I have worked with it fo  a long time. You can also use the following code.\r\nJus put `var queryObj = {};` before document.ready and put the bellow code in the beginning of document.ready. After this code you can use `queryObj[&quot;queryObjectName&quot;]` for any query object you have\r\n\r\n    \r\n    var querystring = location.search.replace(&#39;?&#39;, &#39;&#39;).split(&#39;&amp;&#39;);\r\n    for (var i = 0; i &lt; querystring.length; i++) {\r\n        var name = querystring[i].split(&#39;=&#39;)[0];\r\n        var value = querystring[i].split(&#39;=&#39;)[1];\r\n        queryObj[name] = value;\r\n    }\r\n       \r\n\r\n\r\n  [1]: http://www.darlesson.com/jquery/querystring/",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>I recommend <a href=\"http://www.darlesson.com/jquery/querystring/\" rel=\"nofollow\">Dar Lessons</a> as a good plugin. I have worked with it fo  a long time. You can also use the following code.\nJus put <code>var queryObj = {};</code> before document.ready and put the bellow code in the beginning of document.ready. After this code you can use <code>queryObj[\"queryObjectName\"]</code> for any query object you have</p>\n\n<pre><code>var querystring = location.search.replace('?', '').split('&amp;');\nfor (var i = 0; i &lt; querystring.length; i++) {\n    var name = querystring[i].split('=')[0];\n    var value = querystring[i].split('=')[1];\n    queryObj[name] = value;\n}\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 186010,
          "reputation": 12662,
          "user_id": 423089,
          "user_type": "registered",
          "accept_rate": 50,
          "profile_image": "https://www.gravatar.com/avatar/67a6a3703979f63fd3e843333f449b42?s=128&d=identicon&r=PG",
          "display_name": "krisrak",
          "link": "https://stackoverflow.com/users/423089/krisrak"
        },
        "up_vote_count": 2,
        "is_accepted": false,
        "community_owned_date": 1397672192,
        "score": 2,
        "last_activity_date": 1471027493,
        "last_edit_date": 1471027493,
        "creation_date": 1397672192,
        "answer_id": 23117113,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Here is `String` prototype implementation:\r\n\r\n    String.prototype.getParam = function( str ){\r\n        str = str.replace(/[\\[]/,&quot;\\\\\\[&quot;).replace(/[\\]]/,&quot;\\\\\\]&quot;);\r\n        var regex = new RegExp( &quot;[\\\\?&amp;]*&quot;+str+&quot;=([^&amp;#]*)&quot; );\t\r\n        var results = regex.exec( this );\r\n        if( results == null ){\r\n            return &quot;&quot;;\r\n        } else {\r\n            return results[1];\r\n        }\r\n    }\r\n\r\nExample call:\r\n\r\n    var status = str.getParam(&quot;status&quot;)\r\n\r\n`str` can be a query string or url",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Here is <code>String</code> prototype implementation:</p>\n\n<pre><code>String.prototype.getParam = function( str ){\n    str = str.replace(/[\\[]/,\"\\\\\\[\").replace(/[\\]]/,\"\\\\\\]\");\n    var regex = new RegExp( \"[\\\\?&amp;]*\"+str+\"=([^&amp;#]*)\" );    \n    var results = regex.exec( this );\n    if( results == null ){\n        return \"\";\n    } else {\n        return results[1];\n    }\n}\n</code></pre>\n\n<p>Example call:</p>\n\n<pre><code>var status = str.getParam(\"status\")\n</code></pre>\n\n<p><code>str</code> can be a query string or url</p>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 176486,
          "reputation": 19317,
          "user_id": 407213,
          "user_type": "registered",
          "accept_rate": 74,
          "profile_image": "https://i.stack.imgur.com/c5T4C.jpg?s=128&g=1",
          "display_name": "Dorian",
          "link": "https://stackoverflow.com/users/407213/dorian"
        },
        "up_vote_count": 2,
        "is_accepted": false,
        "community_owned_date": 1392229169,
        "score": 2,
        "last_activity_date": 1471027479,
        "last_edit_date": 1471027479,
        "creation_date": 1392229169,
        "answer_id": 21736323,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This didn&#39;t work for me, I want to match `?b` as the `b` parameter is present, and not match `?return` as the `r` parameter, here is [my solution](https://gist.github.com/Dorian/833b37d2c7b168b7e94c).\r\n\r\n    window.query_param = function(name) {\r\n      var param_value, params;\r\n\r\n      params = location.search.replace(/^\\?/, &#39;&#39;);\r\n      params = _.map(params.split(&#39;&amp;&#39;), function(s) {\r\n        return s.split(&#39;=&#39;);\r\n      });\r\n\r\n      param_value = _.select(params, function(s) {\r\n        return s.first === name;\r\n      })[0];\r\n\r\n      if (param_value) {\r\n        return decodeURIComponent(param_value[1] || &#39;&#39;);\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>This didn't work for me, I want to match <code>?b</code> as the <code>b</code> parameter is present, and not match <code>?return</code> as the <code>r</code> parameter, here is <a href=\"https://gist.github.com/Dorian/833b37d2c7b168b7e94c\" rel=\"nofollow\">my solution</a>.</p>\n\n<pre><code>window.query_param = function(name) {\n  var param_value, params;\n\n  params = location.search.replace(/^\\?/, '');\n  params = _.map(params.split('&amp;'), function(s) {\n    return s.split('=');\n  });\n\n  param_value = _.select(params, function(s) {\n    return s.first === name;\n  })[0];\n\n  if (param_value) {\n    return decodeURIComponent(param_value[1] || '');\n  } else {\n    return null;\n  }\n};\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 2798597,
          "reputation": 3669,
          "user_id": 2407309,
          "user_type": "registered",
          "accept_rate": 57,
          "profile_image": "https://i.stack.imgur.com/AAZOU.jpg?s=128&g=1",
          "display_name": "Vladimir Kornea",
          "link": "https://stackoverflow.com/users/2407309/vladimir-kornea"
        },
        "up_vote_count": 13,
        "is_accepted": false,
        "community_owned_date": 1401416229,
        "score": 13,
        "last_activity_date": 1469485188,
        "last_edit_date": 1469485188,
        "creation_date": 1401416229,
        "answer_id": 23946023,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Here&#39;s what I&#39;m using:\r\n\r\n    /**\r\n     * Examples:\r\n     * getUrlParams()[&#39;myparam&#39;]    // url defaults to the current page\r\n     * getUrlParams(url)[&#39;myparam&#39;] // url can be just a query string\r\n     *\r\n     * Results of calling `getUrlParams(url)[&#39;myparam&#39;]` with various urls:\r\n     * example.com                               (undefined)\r\n     * example.com?                              (undefined)\r\n     * example.com?myparam                       (empty string)\r\n     * example.com?myparam=                      (empty string)\r\n     * example.com?myparam=0                     (the string &#39;0&#39;)\r\n     * example.com?myparam=0&amp;myparam=override    (the string &#39;override&#39;)\r\n     *\r\n     * Origin: http://stackoverflow.com/a/23946023/2407309\r\n     */\r\n    function getUrlParams (url) {\r\n    \tvar urlParams = {} // return value\r\n    \tvar queryString = getQueryString()\r\n    \tif (queryString) {\r\n    \t\tvar keyValuePairs = queryString.split(&#39;&amp;&#39;)\r\n    \t\tfor (var i = 0; i &lt; keyValuePairs.length; i++) {\r\n    \t\t\tvar keyValuePair = keyValuePairs[i].split(&#39;=&#39;)\r\n    \t\t\tvar paramName = keyValuePair[0]\r\n    \t\t\tvar paramValue = keyValuePair[1] || &#39;&#39;\r\n    \t\t\turlParams[paramName] = decodeURIComponent(paramValue.replace(/\\+/g, &#39; &#39;))\r\n    \t\t}\r\n    \t}\r\n    \treturn urlParams // functions below\r\n    \tfunction getQueryString () {\r\n    \t\tvar reducedUrl = url || window.location.search\r\n    \t\treducedUrl = reducedUrl.split(&#39;#&#39;)[0] // Discard fragment identifier.\r\n    \t\tvar queryString = reducedUrl.split(&#39;?&#39;)[1]\r\n    \t\tif (!queryString) {\r\n    \t\t\tif (reducedUrl.search(&#39;=&#39;) !== false) { // URL is a query string.\r\n    \t\t\t\tqueryString = reducedUrl\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\treturn queryString\r\n    \t} // getQueryString\r\n    } // getUrlParams\r\n\r\nReturning &#39;override&#39; rather than &#39;0&#39; in the last case makes it consistent with PHP. Works in IE7.\r\n\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Here's what I'm using:</p>\n\n<pre><code>/**\n * Examples:\n * getUrlParams()['myparam']    // url defaults to the current page\n * getUrlParams(url)['myparam'] // url can be just a query string\n *\n * Results of calling `getUrlParams(url)['myparam']` with various urls:\n * example.com                               (undefined)\n * example.com?                              (undefined)\n * example.com?myparam                       (empty string)\n * example.com?myparam=                      (empty string)\n * example.com?myparam=0                     (the string '0')\n * example.com?myparam=0&amp;myparam=override    (the string 'override')\n *\n * Origin: http://stackoverflow.com/a/23946023/2407309\n */\nfunction getUrlParams (url) {\n    var urlParams = {} // return value\n    var queryString = getQueryString()\n    if (queryString) {\n        var keyValuePairs = queryString.split('&amp;')\n        for (var i = 0; i &lt; keyValuePairs.length; i++) {\n            var keyValuePair = keyValuePairs[i].split('=')\n            var paramName = keyValuePair[0]\n            var paramValue = keyValuePair[1] || ''\n            urlParams[paramName] = decodeURIComponent(paramValue.replace(/\\+/g, ' '))\n        }\n    }\n    return urlParams // functions below\n    function getQueryString () {\n        var reducedUrl = url || window.location.search\n        reducedUrl = reducedUrl.split('#')[0] // Discard fragment identifier.\n        var queryString = reducedUrl.split('?')[1]\n        if (!queryString) {\n            if (reducedUrl.search('=') !== false) { // URL is a query string.\n                queryString = reducedUrl\n            }\n        }\n        return queryString\n    } // getQueryString\n} // getUrlParams\n</code></pre>\n\n<p>Returning 'override' rather than '0' in the last case makes it consistent with PHP. Works in IE7.</p>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 260190,
          "reputation": 24673,
          "user_id": 543601,
          "user_type": "registered",
          "accept_rate": 80,
          "profile_image": "https://i.stack.imgur.com/fejiM.jpg?s=128&g=1",
          "display_name": "Sagiv Ofek",
          "link": "https://stackoverflow.com/users/543601/sagiv-ofek"
        },
        "up_vote_count": 61,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 58,
        "last_activity_date": 1469370127,
        "last_edit_date": 1469370127,
        "creation_date": 1329746400,
        "answer_id": 9362358,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Keep it simple in plain JavaScript code:\r\n\r\n    function qs(key) {\r\n        var vars = [], hash;\r\n        var hashes = window.location.href.slice(window.location.href.indexOf(&#39;?&#39;) + 1).split(&#39;&amp;&#39;);\r\n        for(var i = 0; i &lt; hashes.length; i++)\r\n        {\r\n            hash = hashes[i].split(&#39;=&#39;);\r\n            vars.push(hash[0]);\r\n            vars[hash[0]] = hash[1];\r\n        }\r\n        return vars[key];\r\n    }\r\n\r\nCall it from anywhere in the JavaScript code:\r\n\r\n    var result = qs(&#39;someKey&#39;);\r\n\r\n\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Keep it simple in plain JavaScript code:</p>\n\n<pre><code>function qs(key) {\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&amp;');\n    for(var i = 0; i &lt; hashes.length; i++)\n    {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars[key];\n}\n</code></pre>\n\n<p>Call it from anywhere in the JavaScript code:</p>\n\n<pre><code>var result = qs('someKey');\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 124917,
          "reputation": 1362,
          "user_id": 320345,
          "user_type": "registered",
          "accept_rate": 73,
          "profile_image": "https://i.stack.imgur.com/7LmBP.jpg?s=128&g=1",
          "display_name": "skaurus",
          "link": "https://stackoverflow.com/users/320345/skaurus"
        },
        "up_vote_count": 39,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 37,
        "last_activity_date": 1469369973,
        "last_edit_date": 1495535497,
        "creation_date": 1313664321,
        "answer_id": 7106148,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Here&#39;s my edit to [this excellent answer][1] - with added ability to parse query strings with keys without values.\r\n\r\n    var url = &#39;http://sb.com/reg/step1?param&#39;;\r\n    var qs = (function(a) {\r\n        if (a == &quot;&quot;) return {};\r\n        var b = {};\r\n        for (var i = 0; i &lt; a.length; ++i) {\r\n            var p=a[i].split(&#39;=&#39;, 2);\r\n            if (p[1]) p[1] = decodeURIComponent(p[1].replace(/\\+/g, &quot; &quot;));\r\n            b[p[0]] = p[1];\r\n        }\r\n        return b;\r\n    })((url.split(&#39;?&#39;))[1].split(&#39;&amp;&#39;));\r\n\r\n&lt;b&gt;IMPORTANT!&lt;/b&gt; The parameter for that function in the last line is different. It&#39;s just an example of how one can pass an arbitrary URL to it. You can use last line from Bruno&#39;s answer to parse the current URL.\r\n\r\nSo what exactly changed? With url `http://sb.com/reg/step1?param=` results will be same. But with url `http://sb.com/reg/step1?param` Bruno&#39;s solution returns an object without keys, while mine returns an object with key `param` and `undefined` value.\r\n\r\n  [1]: https://stackoverflow.com/questions/901115/get-query-string-values-in-javascript/3855394#3855394\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Here's my edit to <a href=\"https://stackoverflow.com/questions/901115/get-query-string-values-in-javascript/3855394#3855394\">this excellent answer</a> - with added ability to parse query strings with keys without values.</p>\n\n<pre><code>var url = 'http://sb.com/reg/step1?param';\nvar qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i &lt; a.length; ++i) {\n        var p=a[i].split('=', 2);\n        if (p[1]) p[1] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n        b[p[0]] = p[1];\n    }\n    return b;\n})((url.split('?'))[1].split('&amp;'));\n</code></pre>\n\n<p><b>IMPORTANT!</b> The parameter for that function in the last line is different. It's just an example of how one can pass an arbitrary URL to it. You can use last line from Bruno's answer to parse the current URL.</p>\n\n<p>So what exactly changed? With url <code>http://sb.com/reg/step1?param=</code> results will be same. But with url <code>http://sb.com/reg/step1?param</code> Bruno's solution returns an object without keys, while mine returns an object with key <code>param</code> and <code>undefined</code> value.</p>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 55585,
          "reputation": 23742,
          "user_id": 166491,
          "user_type": "registered",
          "accept_rate": 67,
          "profile_image": "https://i.stack.imgur.com/7au2e.jpg?s=128&g=1",
          "display_name": "Mic",
          "link": "https://stackoverflow.com/users/166491/mic"
        },
        "up_vote_count": 42,
        "is_accepted": false,
        "community_owned_date": 1343334545,
        "score": 41,
        "last_activity_date": 1469369843,
        "last_edit_date": 1469369843,
        "creation_date": 1300097620,
        "answer_id": 5297222,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I use regular expressions a lot, but not for that.\r\n\r\nIt seems easier and more efficient to me to read the query string once in my application, and build an object from all the key/value pairs like:\r\n\r\n    var search = function() {\r\n      var s = window.location.search.substr(1),\r\n        p = s.split(/\\&amp;/), l = p.length, kv, r = {};\r\n      if (l === 0) {return false;}\r\n      while (l--) {\r\n        kv = p[l].split(/\\=/);\r\n        r[kv[0]] = decodeURIComponent(kv[1] || &#39;&#39;) || true;\r\n      }\r\n      return r;\r\n    }();\r\n\r\nFor a URL like `http://domain.com?param1=val1&amp;param2=val2` you can get their value later in your code as `search.param1` and `search.param2`.\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>I use regular expressions a lot, but not for that.</p>\n\n<p>It seems easier and more efficient to me to read the query string once in my application, and build an object from all the key/value pairs like:</p>\n\n<pre><code>var search = function() {\n  var s = window.location.search.substr(1),\n    p = s.split(/\\&amp;/), l = p.length, kv, r = {};\n  if (l === 0) {return false;}\n  while (l--) {\n    kv = p[l].split(/\\=/);\n    r[kv[0]] = decodeURIComponent(kv[1] || '') || true;\n  }\n  return r;\n}();\n</code></pre>\n\n<p>For a URL like <code>http://domain.com?param1=val1&amp;param2=val2</code> you can get their value later in your code as <code>search.param1</code> and <code>search.param2</code>.</p>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 426456,
          "reputation": 29390,
          "user_id": 807674,
          "user_type": "registered",
          "accept_rate": 70,
          "profile_image": "https://www.gravatar.com/avatar/3ccce8c8f0e12321bed1f910921c1f73?s=128&d=identicon&r=PG",
          "display_name": "acjay",
          "link": "https://stackoverflow.com/users/807674/acjay"
        },
        "up_vote_count": 7,
        "is_accepted": false,
        "community_owned_date": 1384960679,
        "score": 5,
        "last_activity_date": 1469369504,
        "last_edit_date": 1469369504,
        "creation_date": 1384960679,
        "answer_id": 20099782,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you have [Underscore.js][1] or [lodash][2], a quick and dirty way to get this done is:\r\n\r\n    _.object(window.location.search.slice(1).split(&#39;&amp;&#39;).map(function (val) { return val.split(&#39;=&#39;); }));\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Underscore.js\r\n  [2]: http://lodash.com/docs#zipObject\r\n\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>If you have <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow\">Underscore.js</a> or <a href=\"http://lodash.com/docs#zipObject\" rel=\"nofollow\">lodash</a>, a quick and dirty way to get this done is:</p>\n\n<pre><code>_.object(window.location.search.slice(1).split('&amp;').map(function (val) { return val.split('='); }));\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 2113415,
          "reputation": 2133,
          "user_id": 1878198,
          "user_type": "registered",
          "accept_rate": 55,
          "profile_image": "https://i.stack.imgur.com/MID8l.jpg?s=128&g=1",
          "display_name": "Pushkraj",
          "link": "https://stackoverflow.com/users/1878198/pushkraj"
        },
        "up_vote_count": 4,
        "is_accepted": false,
        "community_owned_date": 1374584405,
        "score": 3,
        "last_activity_date": 1469369415,
        "last_edit_date": 1469369415,
        "creation_date": 1374584405,
        "answer_id": 17810898,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Use:\r\n\r\n      $(document).ready(function () {\r\n          var urlParams = {};\r\n          (function () {\r\n              var match,\r\n              pl = /\\+/g, // Regex for replacing addition symbol with a space\r\n                  search = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n                  decode = function (s) {\r\n                      return decodeURIComponent(s.replace(pl, &quot; &quot;));\r\n                  },\r\n                  query = window.location.search.substring(1);\r\n\r\n              while (match = search.exec(query))\r\n                  urlParams[decode(match[1])] = decode(match[2]);\r\n          })();\r\n          if (urlParams[&quot;q1&quot;] === 1) {\r\n              return 1;\r\n          }\r\n\r\nPlease check and let me know your comments. Also refer to *[How to get querystring value using jQuery][1]*.\r\n\r\n  [1]: http://jquerybyexample.blogspot.com/2012/05/how-to-get-querystring-value-using.html\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>Use:</p>\n\n<pre><code>  $(document).ready(function () {\n      var urlParams = {};\n      (function () {\n          var match,\n          pl = /\\+/g, // Regex for replacing addition symbol with a space\n              search = /([^&amp;=]+)=?([^&amp;]*)/g,\n              decode = function (s) {\n                  return decodeURIComponent(s.replace(pl, \" \"));\n              },\n              query = window.location.search.substring(1);\n\n          while (match = search.exec(query))\n              urlParams[decode(match[1])] = decode(match[2]);\n      })();\n      if (urlParams[\"q1\"] === 1) {\n          return 1;\n      }\n</code></pre>\n\n<p>Please check and let me know your comments. Also refer to <em><a href=\"http://jquerybyexample.blogspot.com/2012/05/how-to-get-querystring-value-using.html\" rel=\"nofollow\">How to get querystring value using jQuery</a></em>.</p>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 1934792,
          "reputation": 1189,
          "user_id": 1743326,
          "user_type": "registered",
          "accept_rate": 27,
          "profile_image": "https://i.stack.imgur.com/hl1vs.jpg?s=128&g=1",
          "display_name": "soheil bijavar",
          "link": "https://stackoverflow.com/users/1743326/soheil-bijavar"
        },
        "up_vote_count": 2,
        "is_accepted": false,
        "community_owned_date": 1373448457,
        "score": 2,
        "last_activity_date": 1469369266,
        "last_edit_date": 1469369266,
        "creation_date": 1373448457,
        "answer_id": 17567046,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "See this [post][1] or use this:\r\n\r\n    &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot;&gt;\r\n        $(document).ready(function()\r\n        {\r\n            var urlParams = {};\r\n            (function ()\r\n            {\r\n                var match,\r\n                pl= /\\+/g,  // Regular expression for replacing addition symbol with a space\r\n                search = /([^&amp;=]+)=?([^&amp;]*)/g,\r\n                decode = function (s) { return decodeURIComponent(s.replace(pl, &quot; &quot;)); },\r\n                query  = window.location.search.substring(1);\r\n\r\n                while (match = search.exec(query))\r\n                    urlParams[decode(match[1])] = decode(match[2]);\r\n            })();\r\n\r\n            if (urlParams[&quot;q1&quot;] === 1)\r\n            {\r\n                return 1;\r\n            }\r\n        });\r\n    &lt;/script&gt;\r\n\r\n  [1]: http://www.darlesson.com/jquery/querystring/\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>See this <a href=\"http://www.darlesson.com/jquery/querystring/\" rel=\"nofollow\">post</a> or use this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" language=\"javascript\"&gt;\n    $(document).ready(function()\n    {\n        var urlParams = {};\n        (function ()\n        {\n            var match,\n            pl= /\\+/g,  // Regular expression for replacing addition symbol with a space\n            search = /([^&amp;=]+)=?([^&amp;]*)/g,\n            decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n            query  = window.location.search.substring(1);\n\n            while (match = search.exec(query))\n                urlParams[decode(match[1])] = decode(match[2]);\n        })();\n\n        if (urlParams[\"q1\"] === 1)\n        {\n            return 1;\n        }\n    });\n&lt;/script&gt;\n</code></pre>\n"
      },
      {
        "tags": [],
        "owner": {
          "account_id": 1283041,
          "reputation": 1059,
          "user_id": 1236700,
          "user_type": "registered",
          "profile_image": "https://www.gravatar.com/avatar/caf3326592810f17735609a0a6c54df0?s=128&d=identicon&r=PG",
          "display_name": "Mikhus",
          "link": "https://stackoverflow.com/users/1236700/mikhus"
        },
        "up_vote_count": 6,
        "is_accepted": false,
        "community_owned_date": 1366355896,
        "score": 6,
        "last_activity_date": 1469369124,
        "last_edit_date": 1469369124,
        "creation_date": 1366355896,
        "answer_id": 16099285,
        "question_id": 901115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I did a small URL library for my needs here: https://github.com/Mikhus/jsurl\r\n\r\nIt&#39;s a more common way of manipulating the URLs in JavaScript. Meanwhile it&#39;s really lightweight (minified and gzipped &lt; 1&amp;nbsp;KB) and has a very simple and clean API. And it does not need any other library to work.\r\n\r\nRegarding the initial question, it&#39;s very simple to do:\r\n\r\n    var u = new Url; // Current document URL\r\n    // or\r\n    var u = new Url(&#39;http://user:pass@example.com:8080/some/path?foo=bar&amp;bar=baz#anchor&#39;);\r\n\r\n    // Looking for query string parameters\r\n    alert( u.query.bar);\r\n    alert( u.query.foo);\r\n\r\n    // Modifying query string parameters\r\n    u.query.foo = &#39;bla&#39;;\r\n    u.query.woo = [&#39;hi&#39;, &#39;hey&#39;]\r\n\r\n    alert(u.query.foo);\r\n    alert(u.query.woo);\r\n    alert(u);\r\n",
        "title": "How can I get query string values in JavaScript?",
        "body": "<p>I did a small URL library for my needs here: <a href=\"https://github.com/Mikhus/jsurl\" rel=\"nofollow\">https://github.com/Mikhus/jsurl</a></p>\n\n<p>It's a more common way of manipulating the URLs in JavaScript. Meanwhile it's really lightweight (minified and gzipped &lt; 1&nbsp;KB) and has a very simple and clean API. And it does not need any other library to work.</p>\n\n<p>Regarding the initial question, it's very simple to do:</p>\n\n<pre><code>var u = new Url; // Current document URL\n// or\nvar u = new Url('http://user:pass@example.com:8080/some/path?foo=bar&amp;bar=baz#anchor');\n\n// Looking for query string parameters\nalert( u.query.bar);\nalert( u.query.foo);\n\n// Modifying query string parameters\nu.query.foo = 'bla';\nu.query.woo = ['hi', 'hey']\n\nalert(u.query.foo);\nalert(u.query.woo);\nalert(u);\n</code></pre>\n"
      }
    ],
    "has_more": true,
    "quota_max": 10000,
    "quota_remaining": 9992
  }
  return data;
}